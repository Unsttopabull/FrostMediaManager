//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Frost.Providers.Xbmc.DB.XbmcContainer),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsd36fba9b4ab0a757f23094039f8d35b60e0e39a24649e37aa5eca6907e6fbc17))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsd36fba9b4ab0a757f23094039f8d35b60e0e39a24649e37aa5eca6907e6fbc17 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "d36fba9b4ab0a757f23094039f8d35b60e0e39a24649e37aa5eca6907e6fbc17"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.XbmcArt")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.XbmcCountry")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.XbmcDbMovie")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.XbmcMovieActor")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.XbmcPerson")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.XbmcFile")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.XbmcBookmark")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.XbmcPath")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.XbmcDbStreamDetails")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.XbmcGenre")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.XbmcSet")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.XbmcStudio")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.XbmcSettings")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.XbmcDbMovieXbmcPerson")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.XbmcGenreXbmcDbMovie")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.XbmcStudioXbmcDbMovie")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.XbmcDbMovieXbmcPerson1")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.XbmcCountryXbmcDbMovie")
            {
                return GetView17();
            }

            if (extentName == "XbmcContainer.Art")
            {
                return GetView18();
            }

            if (extentName == "XbmcContainer.XbmcDbMovie_Art")
            {
                return GetView19();
            }

            if (extentName == "XbmcContainer.Countries")
            {
                return GetView20();
            }

            if (extentName == "XbmcContainer.Movies")
            {
                return GetView21();
            }

            if (extentName == "XbmcContainer.XbmcFile_Movie")
            {
                return GetView22();
            }

            if (extentName == "XbmcContainer.XbmcPath_Movies")
            {
                return GetView23();
            }

            if (extentName == "XbmcContainer.XbmcMovieActors")
            {
                return GetView24();
            }

            if (extentName == "XbmcContainer.People")
            {
                return GetView25();
            }

            if (extentName == "XbmcContainer.Files")
            {
                return GetView26();
            }

            if (extentName == "XbmcContainer.XbmcBookmarks")
            {
                return GetView27();
            }

            if (extentName == "XbmcContainer.XbmcBookmark_File")
            {
                return GetView28();
            }

            if (extentName == "XbmcContainer.Paths")
            {
                return GetView29();
            }

            if (extentName == "XbmcContainer.StreamDetails")
            {
                return GetView30();
            }

            if (extentName == "XbmcContainer.Genres")
            {
                return GetView31();
            }

            if (extentName == "XbmcContainer.Sets")
            {
                return GetView32();
            }

            if (extentName == "XbmcContainer.Studios")
            {
                return GetView33();
            }

            if (extentName == "XbmcContainer.Settings")
            {
                return GetView34();
            }

            if (extentName == "XbmcContainer.XbmcDbMovie_Directors")
            {
                return GetView35();
            }

            if (extentName == "XbmcContainer.XbmcGenre_Movies")
            {
                return GetView36();
            }

            if (extentName == "XbmcContainer.XbmcStudio_Movies")
            {
                return GetView37();
            }

            if (extentName == "XbmcContainer.XbmcDbMovie_Writers")
            {
                return GetView38();
            }

            if (extentName == "XbmcContainer.XbmcCountry_Movies")
            {
                return GetView39();
            }

            if (extentName == "CodeFirstDatabase.XbmcTagLink")
            {
                return GetView40();
            }

            if (extentName == "CodeFirstDatabase.XbmcTag")
            {
                return GetView41();
            }

            if (extentName == "XbmcContainer.TagLinks")
            {
                return GetView42();
            }

            if (extentName == "XbmcContainer.Tags")
            {
                return GetView43();
            }

            if (extentName == "CodeFirstDatabase.XbmcVersion")
            {
                return GetView44();
            }

            if (extentName == "XbmcContainer.Version")
            {
                return GetView45();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcArt.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcArt
        [CodeFirstDatabaseSchema.XbmcArt](T4.[XbmcArt.art_id], T4.XbmcArt_type, T4.XbmcArt_url, T4.[XbmcArt.media_id], T4.[XbmcArt.media_type])
    FROM (
        SELECT -- Constructing media_type
            T3.[XbmcArt.art_id], 
            T3.XbmcArt_type, 
            T3.XbmcArt_url, 
            T3.[XbmcArt.media_id], 
            CASE
                WHEN T3._from1 THEN N'actor'
                WHEN T3._from2 THEN N'movie'
                ELSE N'set'
            END AS [XbmcArt.media_type]
        FROM (
            SELECT T1.[XbmcArt.art_id], T1.XbmcArt_type, T1.XbmcArt_url, T2.[XbmcArt.media_id], T1._from0, T1._from1, T1._from2, T1._from3, (T2._from4 AND T2._from4 IS NOT NULL) AS _from4
            FROM  (
                SELECT 
                    T.Id AS [XbmcArt.art_id], 
                    T.Type AS XbmcArt_type, 
                    T.Url AS XbmcArt_url, 
                    True AS _from0, 
                    CASE WHEN T IS OF (ONLY [Frost.Providers.Xbmc.DB.XbmcActorArt]) THEN True ELSE False END AS _from1, 
                    CASE WHEN T IS OF (ONLY [Frost.Providers.Xbmc.DB.XbmcMovieArt]) THEN True ELSE False END AS _from2, 
                    CASE WHEN T IS OF (ONLY [Frost.Providers.Xbmc.DB.XbmcSetArt]) THEN True ELSE False END AS _from3
                FROM XbmcContainer.Art AS T) AS T1
                LEFT OUTER JOIN (
                SELECT 
                    Key(T.XbmcDbMovie_Art_Target).Id AS [XbmcArt.art_id], 
                    Key(T.XbmcDbMovie_Art_Source).Id AS [XbmcArt.media_id], 
                    True AS _from4
                FROM XbmcContainer.XbmcDbMovie_Art AS T) AS T2
                ON T1.[XbmcArt.art_id] = T2.[XbmcArt.art_id]
        ) AS T3
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcCountry.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcCountry
        [CodeFirstDatabaseSchema.XbmcCountry](T1.XbmcCountry_idCountry, T1.XbmcCountry_strCountry)
    FROM (
        SELECT 
            T.Id AS XbmcCountry_idCountry, 
            T.Name AS XbmcCountry_strCountry, 
            True AS _from0
        FROM XbmcContainer.Countries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcDbMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcDbMovie
        [CodeFirstDatabaseSchema.XbmcDbMovie](T4.XbmcDbMovie_idMovie, T4.XbmcDbMovie_c00, T4.XbmcDbMovie_c01, T4.XbmcDbMovie_c02, T4.XbmcDbMovie_c03, T4.XbmcDbMovie_c04, T4.XbmcDbMovie_c05, T4.XbmcDbMovie_c06, T4.XbmcDbMovie_c07, T4.XbmcDbMovie_c08, T4.XbmcDbMovie_c09, T4.XbmcDbMovie_c10, T4.XbmcDbMovie_c11, T4.XbmcDbMovie_c12, T4.XbmcDbMovie_c13, T4.XbmcDbMovie_c14, T4.XbmcDbMovie_c15, T4.XbmcDbMovie_c16, T4.XbmcDbMovie_c17, T4.XbmcDbMovie_c18, T4.XbmcDbMovie_c19, T4.XbmcDbMovie_c20, T4.XbmcDbMovie_c21, T4.XbmcDbMovie_c22, T4.XbmcDbMovie_idSet, T4.XbmcDbMovie_idFile, T4.XbmcDbMovie_c23)
    FROM (
        SELECT T1.XbmcDbMovie_idMovie, T3.XbmcDbMovie_c00, T3.XbmcDbMovie_c01, T3.XbmcDbMovie_c02, T3.XbmcDbMovie_c03, T3.XbmcDbMovie_c04, T3.XbmcDbMovie_c05, T3.XbmcDbMovie_c06, T3.XbmcDbMovie_c07, T3.XbmcDbMovie_c08, T3.XbmcDbMovie_c09, T3.XbmcDbMovie_c10, T3.XbmcDbMovie_c11, T3.XbmcDbMovie_c12, T3.XbmcDbMovie_c13, T3.XbmcDbMovie_c14, T3.XbmcDbMovie_c15, T3.XbmcDbMovie_c16, T3.XbmcDbMovie_c17, T3.XbmcDbMovie_c18, T3.XbmcDbMovie_c19, T3.XbmcDbMovie_c20, T3.XbmcDbMovie_c21, T3.XbmcDbMovie_c22, T3.XbmcDbMovie_idSet, T2.XbmcDbMovie_idFile, T1.XbmcDbMovie_c23, T3._from0, T2._from1, T1._from2
        FROM  (
            SELECT 
                Key(T.XbmcPath_Movies_Target).Id AS XbmcDbMovie_idMovie, 
                Key(T.XbmcPath_Movies_Source).Id AS XbmcDbMovie_c23, 
                True AS _from2
            FROM XbmcContainer.XbmcPath_Movies AS T) AS T1
            INNER JOIN (
            SELECT 
                Key(T.XbmcFile_Movie_Target).Id AS XbmcDbMovie_idMovie, 
                Key(T.XbmcFile_Movie_Source).Id AS XbmcDbMovie_idFile, 
                True AS _from1
            FROM XbmcContainer.XbmcFile_Movie AS T) AS T2
            ON T1.XbmcDbMovie_idMovie = T2.XbmcDbMovie_idMovie
            INNER JOIN (
            SELECT 
                T.Id AS XbmcDbMovie_idMovie, 
                T.Title AS XbmcDbMovie_c00, 
                T.Plot AS XbmcDbMovie_c01, 
                T.PlotOutline AS XbmcDbMovie_c02, 
                T.Tagline AS XbmcDbMovie_c03, 
                T.Votes AS XbmcDbMovie_c04, 
                T.Rating AS XbmcDbMovie_c05, 
                T.WriterNames AS XbmcDbMovie_c06, 
                T.ReleaseYear AS XbmcDbMovie_c07, 
                T.Thumbnails AS XbmcDbMovie_c08, 
                T.ImdbID AS XbmcDbMovie_c09, 
                T.SortTitle AS XbmcDbMovie_c10, 
                T.Runtime AS XbmcDbMovie_c11, 
                T.MpaaRating AS XbmcDbMovie_c12, 
                T.ImdbTop250 AS XbmcDbMovie_c13, 
                T.GenreString AS XbmcDbMovie_c14, 
                T.DirectorsString AS XbmcDbMovie_c15, 
                T.OriginalTitle AS XbmcDbMovie_c16, 
                T.Unknown AS XbmcDbMovie_c17, 
                T.StudioNames AS XbmcDbMovie_c18, 
                T.TrailerUrl AS XbmcDbMovie_c19, 
                T.FanartUrls AS XbmcDbMovie_c20, 
                T.CountryString AS XbmcDbMovie_c21, 
                T.FolderPath AS XbmcDbMovie_c22, 
                T.SetId AS XbmcDbMovie_idSet, 
                True AS _from0
            FROM XbmcContainer.Movies AS T) AS T3
            ON T1.XbmcDbMovie_idMovie = T3.XbmcDbMovie_idMovie
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcMovieActor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcMovieActor
        [CodeFirstDatabaseSchema.XbmcMovieActor](T1.XbmcMovieActor_idActor, T1.XbmcMovieActor_idMovie, T1.XbmcMovieActor_strRole, T1.XbmcMovieActor_iOrder)
    FROM (
        SELECT 
            T.PersonId AS XbmcMovieActor_idActor, 
            T.MovieId AS XbmcMovieActor_idMovie, 
            T.Role AS XbmcMovieActor_strRole, 
            T.[Order] AS XbmcMovieActor_iOrder, 
            True AS _from0
        FROM XbmcContainer.XbmcMovieActors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcPerson.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcPerson
        [CodeFirstDatabaseSchema.XbmcPerson](T1.XbmcPerson_idActor, T1.XbmcPerson_strActor, T1.XbmcPerson_strThumb)
    FROM (
        SELECT 
            T.Id AS XbmcPerson_idActor, 
            T.Name AS XbmcPerson_strActor, 
            T.ThumbXml AS XbmcPerson_strThumb, 
            True AS _from0
        FROM XbmcContainer.People AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcFile.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcFile
        [CodeFirstDatabaseSchema.XbmcFile](T1.XbmcFile_idFile, T1.XbmcFile_idPath, T1.XbmcFile_strFilename, T1.XbmcFile_playCount, T1.XbmcFile_lastPlayed, T1.XbmcFile_dateAdded)
    FROM (
        SELECT 
            T.Id AS XbmcFile_idFile, 
            T.PathId AS XbmcFile_idPath, 
            T.FileNameString AS XbmcFile_strFilename, 
            T.PlayCount AS XbmcFile_playCount, 
            T.LastPlayed AS XbmcFile_lastPlayed, 
            T.DateAdded AS XbmcFile_dateAdded, 
            True AS _from0
        FROM XbmcContainer.Files AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcBookmark.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcBookmark
        [CodeFirstDatabaseSchema.XbmcBookmark](T3.XbmcBookmark_idBookmark, T3.XbmcBookmark_timeInSeconds, T3.XbmcBookmark_totalTimeInSeconds, T3.XbmcBookmark_thumbNailImage, T3.XbmcBookmark_player, T3.XbmcBookmark_playerState, T3.XbmcBookmark_type, T3.XbmcBookmark_idFile)
    FROM (
        SELECT T1.XbmcBookmark_idBookmark, T2.XbmcBookmark_timeInSeconds, T2.XbmcBookmark_totalTimeInSeconds, T2.XbmcBookmark_thumbNailImage, T2.XbmcBookmark_player, T2.XbmcBookmark_playerState, T2.XbmcBookmark_type, T1.XbmcBookmark_idFile, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.XbmcBookmark_File_Source).Id AS XbmcBookmark_idBookmark, 
                Key(T.XbmcBookmark_File_Target).Id AS XbmcBookmark_idFile, 
                True AS _from1
            FROM XbmcContainer.XbmcBookmark_File AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS XbmcBookmark_idBookmark, 
                T.TimeInSeconds AS XbmcBookmark_timeInSeconds, 
                T.TotalTimeInSeconds AS XbmcBookmark_totalTimeInSeconds, 
                T.ThumbnailImage AS XbmcBookmark_thumbNailImage, 
                T.Player AS XbmcBookmark_player, 
                T.PlayerState AS XbmcBookmark_playerState, 
                CAST(T.Type AS [Edm.Int64]) AS XbmcBookmark_type, 
                True AS _from0
            FROM XbmcContainer.XbmcBookmarks AS T) AS T2
            ON T1.XbmcBookmark_idBookmark = T2.XbmcBookmark_idBookmark
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcPath.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcPath
        [CodeFirstDatabaseSchema.XbmcPath](T1.XbmcPath_idPath, T1.XbmcPath_strPath, T1.XbmcPath_strContent, T1.XbmcPath_strScraper, T1.XbmcPath_strHash, T1.XbmcPath_scanRecursive, T1.XbmcPath_useFolderNames, T1.XbmcPath_strSettings, T1.XbmcPath_noUpdate, T1.XbmcPath_exclude, T1.XbmcPath_dateAdded)
    FROM (
        SELECT 
            T.Id AS XbmcPath_idPath, 
            T.FolderPath AS XbmcPath_strPath, 
            T.ContentType AS XbmcPath_strContent, 
            T.Scraper AS XbmcPath_strScraper, 
            T.Hash AS XbmcPath_strHash, 
            T.ScanRecursive AS XbmcPath_scanRecursive, 
            T.UseFolderNames AS XbmcPath_useFolderNames, 
            T.Settings AS XbmcPath_strSettings, 
            T.NoUpdate AS XbmcPath_noUpdate, 
            T.Exclude AS XbmcPath_exclude, 
            T.DateAdded AS XbmcPath_dateAdded, 
            True AS _from0
        FROM XbmcContainer.Paths AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcDbStreamDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcDbStreamDetails
        [CodeFirstDatabaseSchema.XbmcDbStreamDetails](T2.XbmcDbStreamDetails_idStream, T2.XbmcDbStreamDetails_idFile, T2.XbmcDbStreamDetails_strAudioCodec, T2.XbmcDbStreamDetails_iAudioChannels, T2.XbmcDbStreamDetails_strAudioLanguage, T2.XbmcDbStreamDetails_strSubtitleLanguage, T2.XbmcDbStreamDetails_strVideoCodec, T2.XbmcDbStreamDetails_fVideoAspect, T2.XbmcDbStreamDetails_iVideoWidth, T2.XbmcDbStreamDetails_iVideoHeight, T2.XbmcDbStreamDetails_iVideoDuration, T2.XbmcDbStreamDetails_iStreamType)
    FROM (
        SELECT -- Constructing iStreamType
            T1.XbmcDbStreamDetails_idStream, 
            T1.XbmcDbStreamDetails_idFile, 
            T1.XbmcDbStreamDetails_strAudioCodec, 
            T1.XbmcDbStreamDetails_iAudioChannels, 
            T1.XbmcDbStreamDetails_strAudioLanguage, 
            T1.XbmcDbStreamDetails_strSubtitleLanguage, 
            T1.XbmcDbStreamDetails_strVideoCodec, 
            T1.XbmcDbStreamDetails_fVideoAspect, 
            T1.XbmcDbStreamDetails_iVideoWidth, 
            T1.XbmcDbStreamDetails_iVideoHeight, 
            T1.XbmcDbStreamDetails_iVideoDuration, 
            CASE
                WHEN T1._from1 THEN CAST('1' AS [Edm.Int32])
                WHEN T1._from2 THEN CAST('2' AS [Edm.Int32])
                ELSE CAST('0' AS [Edm.Int32])
            END AS XbmcDbStreamDetails_iStreamType
        FROM (
            SELECT 
                T.Id AS XbmcDbStreamDetails_idStream, 
                T.FileId AS XbmcDbStreamDetails_idFile, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcAudioDetails]).Codec AS XbmcDbStreamDetails_strAudioCodec, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcAudioDetails]).Channels AS XbmcDbStreamDetails_iAudioChannels, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcAudioDetails]).Language AS XbmcDbStreamDetails_strAudioLanguage, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcSubtitleDetails]).Language AS XbmcDbStreamDetails_strSubtitleLanguage, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcVideoDetails]).Codec AS XbmcDbStreamDetails_strVideoCodec, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcVideoDetails]).Aspect AS XbmcDbStreamDetails_fVideoAspect, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcVideoDetails]).Width AS XbmcDbStreamDetails_iVideoWidth, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcVideoDetails]).Height AS XbmcDbStreamDetails_iVideoHeight, 
                TREAT(T AS [Frost.Providers.Xbmc.DB.XbmcVideoDetails]).Duration AS XbmcDbStreamDetails_iVideoDuration, 
                CASE WHEN T IS OF (ONLY [Frost.Providers.Xbmc.DB.XbmcVideoDetails]) THEN True ELSE False END AS _from0, 
                CASE WHEN T IS OF (ONLY [Frost.Providers.Xbmc.DB.XbmcAudioDetails]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [Frost.Providers.Xbmc.DB.XbmcSubtitleDetails]) THEN True ELSE False END AS _from2, 
                True AS _from3
            FROM XbmcContainer.StreamDetails AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcGenre.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcGenre
        [CodeFirstDatabaseSchema.XbmcGenre](T1.XbmcGenre_idGenre, T1.XbmcGenre_strGenre)
    FROM (
        SELECT 
            T.Id AS XbmcGenre_idGenre, 
            T.Name AS XbmcGenre_strGenre, 
            True AS _from0
        FROM XbmcContainer.Genres AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcSet.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcSet
        [CodeFirstDatabaseSchema.XbmcSet](T1.XbmcSet_idSet, T1.XbmcSet_strSet)
    FROM (
        SELECT 
            T.Id AS XbmcSet_idSet, 
            T.Name AS XbmcSet_strSet, 
            True AS _from0
        FROM XbmcContainer.Sets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcStudio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcStudio
        [CodeFirstDatabaseSchema.XbmcStudio](T1.XbmcStudio_idStudio, T1.XbmcStudio_strStudio)
    FROM (
        SELECT 
            T.Id AS XbmcStudio_idStudio, 
            T.Name AS XbmcStudio_strStudio, 
            True AS _from0
        FROM XbmcContainer.Studios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcSettings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcSettings
        [CodeFirstDatabaseSchema.XbmcSettings](T1.XbmcSettings_idSetting, T1.XbmcSettings_idFile, T1.XbmcSettings_Deinterlace, T1.XbmcSettings_ViewMode, T1.XbmcSettings_ZoomAmount, T1.XbmcSettings_PixelRatio, T1.XbmcSettings_VerticalShift, T1.XbmcSettings_AudioStream, T1.XbmcSettings_SubtitleStream, T1.XbmcSettings_SubtitleDelay, T1.XbmcSettings_SubtitlesOn, T1.XbmcSettings_Brightness, T1.XbmcSettings_Contrast, T1.XbmcSettings_Gamma, T1.XbmcSettings_VolumeAmplification, T1.XbmcSettings_AudioDelay, T1.XbmcSettings_OutputToAllSpeakers, T1.XbmcSettings_ResumeTime, T1.XbmcSettings_Crop, T1.XbmcSettings_CropLeft, T1.XbmcSettings_CropRight, T1.XbmcSettings_CropTop, T1.XbmcSettings_CropBottom, T1.XbmcSettings_Sharpness, T1.XbmcSettings_NoiseReduction, T1.XbmcSettings_NonLinStretch, T1.XbmcSettings_PostProcess, T1.XbmcSettings_ScalingMethod, T1.XbmcSettings_DeinterlaceMode)
    FROM (
        SELECT 
            T.Id AS XbmcSettings_idSetting, 
            T.FileId AS XbmcSettings_idFile, 
            T.Deinterlace AS XbmcSettings_Deinterlace, 
            CAST(T.ViewMode AS [Edm.Int64]) AS XbmcSettings_ViewMode, 
            T.ZoomAmount AS XbmcSettings_ZoomAmount, 
            T.PixelRatio AS XbmcSettings_PixelRatio, 
            T.VerticalShift AS XbmcSettings_VerticalShift, 
            T.AudioStream AS XbmcSettings_AudioStream, 
            T.SubtitleStream AS XbmcSettings_SubtitleStream, 
            T.SubtitleDelay AS XbmcSettings_SubtitleDelay, 
            T.SubtitlesOn AS XbmcSettings_SubtitlesOn, 
            T.Brightness AS XbmcSettings_Brightness, 
            T.Contrast AS XbmcSettings_Contrast, 
            T.Gamma AS XbmcSettings_Gamma, 
            T.VolumeAmplification AS XbmcSettings_VolumeAmplification, 
            T.AudioDelay AS XbmcSettings_AudioDelay, 
            T.OutputToAllSpeakers AS XbmcSettings_OutputToAllSpeakers, 
            T.ResumeTime AS XbmcSettings_ResumeTime, 
            T.Crop AS XbmcSettings_Crop, 
            T.CropLeft AS XbmcSettings_CropLeft, 
            T.CropRight AS XbmcSettings_CropRight, 
            T.CropTop AS XbmcSettings_CropTop, 
            T.CropBottom AS XbmcSettings_CropBottom, 
            T.Sharpness AS XbmcSettings_Sharpness, 
            T.NoiseReduction AS XbmcSettings_NoiseReduction, 
            T.NonLinearStretch AS XbmcSettings_NonLinStretch, 
            T.PostProcess AS XbmcSettings_PostProcess, 
            CAST(T.ScalingMethod AS [Edm.Int64]) AS XbmcSettings_ScalingMethod, 
            CAST(T.DeinterlaceMode AS [Edm.Int64]) AS XbmcSettings_DeinterlaceMode, 
            True AS _from0
        FROM XbmcContainer.Settings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcDbMovieXbmcPerson.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcDbMovieXbmcPerson
        [CodeFirstDatabaseSchema.XbmcDbMovieXbmcPerson](T1.XbmcDbMovieXbmcPerson_idMovie, T1.XbmcDbMovieXbmcPerson_idDirector)
    FROM (
        SELECT 
            Key(T.XbmcDbMovie_Directors_Source).Id AS XbmcDbMovieXbmcPerson_idMovie, 
            Key(T.XbmcDbMovie_Directors_Target).Id AS XbmcDbMovieXbmcPerson_idDirector, 
            True AS _from0
        FROM XbmcContainer.XbmcDbMovie_Directors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcGenreXbmcDbMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcGenreXbmcDbMovie
        [CodeFirstDatabaseSchema.XbmcGenreXbmcDbMovie](T1.XbmcGenreXbmcDbMovie_idGenre, T1.XbmcGenreXbmcDbMovie_idMovie)
    FROM (
        SELECT 
            Key(T.XbmcGenre_Movies_Source).Id AS XbmcGenreXbmcDbMovie_idGenre, 
            Key(T.XbmcGenre_Movies_Target).Id AS XbmcGenreXbmcDbMovie_idMovie, 
            True AS _from0
        FROM XbmcContainer.XbmcGenre_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcStudioXbmcDbMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcStudioXbmcDbMovie
        [CodeFirstDatabaseSchema.XbmcStudioXbmcDbMovie](T1.XbmcStudioXbmcDbMovie_idStudio, T1.XbmcStudioXbmcDbMovie_idMovie)
    FROM (
        SELECT 
            Key(T.XbmcStudio_Movies_Source).Id AS XbmcStudioXbmcDbMovie_idStudio, 
            Key(T.XbmcStudio_Movies_Target).Id AS XbmcStudioXbmcDbMovie_idMovie, 
            True AS _from0
        FROM XbmcContainer.XbmcStudio_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcDbMovieXbmcPerson1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcDbMovieXbmcPerson1
        [CodeFirstDatabaseSchema.XbmcDbMovieXbmcPerson1](T1.XbmcDbMovieXbmcPerson1_idMovie, T1.XbmcDbMovieXbmcPerson1_idWriter)
    FROM (
        SELECT 
            Key(T.XbmcDbMovie_Writers_Source).Id AS XbmcDbMovieXbmcPerson1_idMovie, 
            Key(T.XbmcDbMovie_Writers_Target).Id AS XbmcDbMovieXbmcPerson1_idWriter, 
            True AS _from0
        FROM XbmcContainer.XbmcDbMovie_Writers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcCountryXbmcDbMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcCountryXbmcDbMovie
        [CodeFirstDatabaseSchema.XbmcCountryXbmcDbMovie](T1.XbmcCountryXbmcDbMovie_idCountry, T1.XbmcCountryXbmcDbMovie_idMovie)
    FROM (
        SELECT 
            Key(T.XbmcCountry_Movies_Source).Id AS XbmcCountryXbmcDbMovie_idCountry, 
            Key(T.XbmcCountry_Movies_Target).Id AS XbmcCountryXbmcDbMovie_idMovie, 
            True AS _from0
        FROM XbmcContainer.XbmcCountry_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Art.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Art
        CASE
            WHEN T1._from1 THEN [Frost.Providers.Xbmc.DB.XbmcActorArt](T1.XbmcArt_Id, T1.XbmcArt_Type, T1.XbmcArt_Url)
            WHEN T1._from2 THEN [Frost.Providers.Xbmc.DB.XbmcMovieArt](T1.XbmcArt_Id, T1.XbmcArt_Type, T1.XbmcArt_Url) WITH 
                RELATIONSHIP(CREATEREF(XbmcContainer.Movies, ROW(T1.[XbmcDbMovie_Art.XbmcDbMovie_Art_Source.Id]),[Frost.Providers.Xbmc.DB.XbmcDbMovie]),[Frost.Providers.Xbmc.DB.XbmcDbMovie_Art],XbmcDbMovie_Art_Target,XbmcDbMovie_Art_Source) 
            ELSE [Frost.Providers.Xbmc.DB.XbmcSetArt](T1.XbmcArt_Id, T1.XbmcArt_Type, T1.XbmcArt_Url)
        END
    FROM (
        SELECT 
            T.art_id AS XbmcArt_Id, 
            T.type AS XbmcArt_Type, 
            T.url AS XbmcArt_Url, 
            True AS _from0, 
            CASE WHEN T.media_type = N'actor' THEN True ELSE False END AS _from1, 
            CASE WHEN T.media_type = N'movie' THEN True ELSE False END AS _from2, 
            CASE WHEN T.media_type = N'set' THEN True ELSE False END AS _from3, 
            T.media_id AS [XbmcDbMovie_Art.XbmcDbMovie_Art_Source.Id]
        FROM CodeFirstDatabase.XbmcArt AS T
        WHERE T.media_type IN {N'actor', N'movie', N'set'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcDbMovie_Art.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcDbMovie_Art
        [Frost.Providers.Xbmc.DB.XbmcDbMovie_Art](T3.[XbmcDbMovie_Art.XbmcDbMovie_Art_Source], T3.[XbmcDbMovie_Art.XbmcDbMovie_Art_Target])
    FROM (
        SELECT -- Constructing XbmcDbMovie_Art_Source
            CreateRef(XbmcContainer.Movies, row(T2.[XbmcDbMovie_Art.XbmcDbMovie_Art_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcDbMovie_Art.XbmcDbMovie_Art_Source], 
            T2.[XbmcDbMovie_Art.XbmcDbMovie_Art_Target]
        FROM (
            SELECT -- Constructing XbmcDbMovie_Art_Target
                T1.[XbmcDbMovie_Art.XbmcDbMovie_Art_Source.Id], 
                CreateRef(XbmcContainer.Art, row(T1.[XbmcDbMovie_Art.XbmcDbMovie_Art_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcMovieArt]) AS [XbmcDbMovie_Art.XbmcDbMovie_Art_Target]
            FROM (
                SELECT 
                    T.media_id AS [XbmcDbMovie_Art.XbmcDbMovie_Art_Source.Id], 
                    T.art_id AS [XbmcDbMovie_Art.XbmcDbMovie_Art_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcArt AS T
                WHERE T.media_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Countries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Countries
        [Frost.Providers.Xbmc.DB.XbmcCountry](T1.XbmcCountry_Id, T1.XbmcCountry_Name)
    FROM (
        SELECT 
            T.idCountry AS XbmcCountry_Id, 
            T.strCountry AS XbmcCountry_Name, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcCountry AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Movies
        [Frost.Providers.Xbmc.DB.XbmcDbMovie](T1.XbmcDbMovie_Id, T1.XbmcDbMovie_Title, T1.XbmcDbMovie_Plot, T1.XbmcDbMovie_PlotOutline, T1.XbmcDbMovie_Tagline, T1.XbmcDbMovie_Votes, T1.XbmcDbMovie_Rating, T1.XbmcDbMovie_WriterNames, T1.XbmcDbMovie_ReleaseYear, T1.XbmcDbMovie_Thumbnails, T1.XbmcDbMovie_ImdbID, T1.XbmcDbMovie_SortTitle, T1.XbmcDbMovie_Runtime, T1.XbmcDbMovie_MpaaRating, T1.XbmcDbMovie_ImdbTop250, T1.XbmcDbMovie_GenreString, T1.XbmcDbMovie_DirectorsString, T1.XbmcDbMovie_OriginalTitle, T1.XbmcDbMovie_Unknown, T1.XbmcDbMovie_StudioNames, T1.XbmcDbMovie_TrailerUrl, T1.XbmcDbMovie_FanartUrls, T1.XbmcDbMovie_CountryString, T1.XbmcDbMovie_FolderPath, T1.XbmcDbMovie_SetId) WITH 
        RELATIONSHIP(CREATEREF(XbmcContainer.Files, ROW(T1.[XbmcFile_Movie.XbmcFile_Movie_Source.Id]),[Frost.Providers.Xbmc.DB.XbmcFile]),[Frost.Providers.Xbmc.DB.XbmcFile_Movie],XbmcFile_Movie_Target,XbmcFile_Movie_Source) 
        RELATIONSHIP(CREATEREF(XbmcContainer.Paths, ROW(T1.[XbmcPath_Movies.XbmcPath_Movies_Source.Id]),[Frost.Providers.Xbmc.DB.XbmcPath]),[Frost.Providers.Xbmc.DB.XbmcPath_Movies],XbmcPath_Movies_Target,XbmcPath_Movies_Source) 
    FROM (
        SELECT 
            T.idMovie AS XbmcDbMovie_Id, 
            T.c00 AS XbmcDbMovie_Title, 
            T.c01 AS XbmcDbMovie_Plot, 
            T.c02 AS XbmcDbMovie_PlotOutline, 
            T.c03 AS XbmcDbMovie_Tagline, 
            T.c04 AS XbmcDbMovie_Votes, 
            T.c05 AS XbmcDbMovie_Rating, 
            T.c06 AS XbmcDbMovie_WriterNames, 
            T.c07 AS XbmcDbMovie_ReleaseYear, 
            T.c08 AS XbmcDbMovie_Thumbnails, 
            T.c09 AS XbmcDbMovie_ImdbID, 
            T.c10 AS XbmcDbMovie_SortTitle, 
            T.c11 AS XbmcDbMovie_Runtime, 
            T.c12 AS XbmcDbMovie_MpaaRating, 
            T.c13 AS XbmcDbMovie_ImdbTop250, 
            T.c14 AS XbmcDbMovie_GenreString, 
            T.c15 AS XbmcDbMovie_DirectorsString, 
            T.c16 AS XbmcDbMovie_OriginalTitle, 
            T.c17 AS XbmcDbMovie_Unknown, 
            T.c18 AS XbmcDbMovie_StudioNames, 
            T.c19 AS XbmcDbMovie_TrailerUrl, 
            T.c20 AS XbmcDbMovie_FanartUrls, 
            T.c21 AS XbmcDbMovie_CountryString, 
            T.c22 AS XbmcDbMovie_FolderPath, 
            T.idSet AS XbmcDbMovie_SetId, 
            True AS _from0, 
            T.idFile AS [XbmcFile_Movie.XbmcFile_Movie_Source.Id], 
            T.c23 AS [XbmcPath_Movies.XbmcPath_Movies_Source.Id]
        FROM CodeFirstDatabase.XbmcDbMovie AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcFile_Movie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcFile_Movie
        [Frost.Providers.Xbmc.DB.XbmcFile_Movie](T3.[XbmcFile_Movie.XbmcFile_Movie_Source], T3.[XbmcFile_Movie.XbmcFile_Movie_Target])
    FROM (
        SELECT -- Constructing XbmcFile_Movie_Source
            CreateRef(XbmcContainer.Files, row(T2.[XbmcFile_Movie.XbmcFile_Movie_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcFile]) AS [XbmcFile_Movie.XbmcFile_Movie_Source], 
            T2.[XbmcFile_Movie.XbmcFile_Movie_Target]
        FROM (
            SELECT -- Constructing XbmcFile_Movie_Target
                T1.[XbmcFile_Movie.XbmcFile_Movie_Source.Id], 
                CreateRef(XbmcContainer.Movies, row(T1.[XbmcFile_Movie.XbmcFile_Movie_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcFile_Movie.XbmcFile_Movie_Target]
            FROM (
                SELECT 
                    T.idFile AS [XbmcFile_Movie.XbmcFile_Movie_Source.Id], 
                    T.idMovie AS [XbmcFile_Movie.XbmcFile_Movie_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcDbMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcPath_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcPath_Movies
        [Frost.Providers.Xbmc.DB.XbmcPath_Movies](T3.[XbmcPath_Movies.XbmcPath_Movies_Source], T3.[XbmcPath_Movies.XbmcPath_Movies_Target])
    FROM (
        SELECT -- Constructing XbmcPath_Movies_Source
            CreateRef(XbmcContainer.Paths, row(T2.[XbmcPath_Movies.XbmcPath_Movies_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcPath]) AS [XbmcPath_Movies.XbmcPath_Movies_Source], 
            T2.[XbmcPath_Movies.XbmcPath_Movies_Target]
        FROM (
            SELECT -- Constructing XbmcPath_Movies_Target
                T1.[XbmcPath_Movies.XbmcPath_Movies_Source.Id], 
                CreateRef(XbmcContainer.Movies, row(T1.[XbmcPath_Movies.XbmcPath_Movies_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcPath_Movies.XbmcPath_Movies_Target]
            FROM (
                SELECT 
                    T.c23 AS [XbmcPath_Movies.XbmcPath_Movies_Source.Id], 
                    T.idMovie AS [XbmcPath_Movies.XbmcPath_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcDbMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcMovieActors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcMovieActors
        [Frost.Providers.Xbmc.DB.XbmcMovieActor](T1.XbmcMovieActor_PersonId, T1.XbmcMovieActor_MovieId, T1.XbmcMovieActor_Role, T1.XbmcMovieActor_Order)
    FROM (
        SELECT 
            T.idActor AS XbmcMovieActor_PersonId, 
            T.idMovie AS XbmcMovieActor_MovieId, 
            T.strRole AS XbmcMovieActor_Role, 
            T.iOrder AS XbmcMovieActor_Order, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcMovieActor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.People.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing People
        [Frost.Providers.Xbmc.DB.XbmcPerson](T1.XbmcPerson_Id, T1.XbmcPerson_Name, T1.XbmcPerson_ThumbXml)
    FROM (
        SELECT 
            T.idActor AS XbmcPerson_Id, 
            T.strActor AS XbmcPerson_Name, 
            T.strThumb AS XbmcPerson_ThumbXml, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcPerson AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Files.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Files
        [Frost.Providers.Xbmc.DB.XbmcFile](T1.XbmcFile_Id, T1.XbmcFile_PathId, T1.XbmcFile_FileNameString, T1.XbmcFile_PlayCount, T1.XbmcFile_LastPlayed, T1.XbmcFile_DateAdded)
    FROM (
        SELECT 
            T.idFile AS XbmcFile_Id, 
            T.idPath AS XbmcFile_PathId, 
            T.strFilename AS XbmcFile_FileNameString, 
            T.playCount AS XbmcFile_PlayCount, 
            T.lastPlayed AS XbmcFile_LastPlayed, 
            T.dateAdded AS XbmcFile_DateAdded, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcFile AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcBookmarks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcBookmarks
        [Frost.Providers.Xbmc.DB.XbmcBookmark](T1.XbmcBookmark_Id, T1.XbmcBookmark_TimeInSeconds, T1.XbmcBookmark_TotalTimeInSeconds, T1.XbmcBookmark_ThumbnailImage, T1.XbmcBookmark_Player, T1.XbmcBookmark_PlayerState, T1.XbmcBookmark_Type) WITH 
        RELATIONSHIP(CREATEREF(XbmcContainer.Files, ROW(T1.[XbmcBookmark_File.XbmcBookmark_File_Target.Id]),[Frost.Providers.Xbmc.DB.XbmcFile]),[Frost.Providers.Xbmc.DB.XbmcBookmark_File],XbmcBookmark_File_Source,XbmcBookmark_File_Target) 
    FROM (
        SELECT 
            T.idBookmark AS XbmcBookmark_Id, 
            T.timeInSeconds AS XbmcBookmark_TimeInSeconds, 
            T.totalTimeInSeconds AS XbmcBookmark_TotalTimeInSeconds, 
            T.thumbNailImage AS XbmcBookmark_ThumbnailImage, 
            T.player AS XbmcBookmark_Player, 
            T.playerState AS XbmcBookmark_PlayerState, 
            CAST(T.type AS [Frost.Providers.Xbmc.DB.BookmarkType]) AS XbmcBookmark_Type, 
            True AS _from0, 
            T.idFile AS [XbmcBookmark_File.XbmcBookmark_File_Target.Id]
        FROM CodeFirstDatabase.XbmcBookmark AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcBookmark_File.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcBookmark_File
        [Frost.Providers.Xbmc.DB.XbmcBookmark_File](T3.[XbmcBookmark_File.XbmcBookmark_File_Source], T3.[XbmcBookmark_File.XbmcBookmark_File_Target])
    FROM (
        SELECT -- Constructing XbmcBookmark_File_Source
            CreateRef(XbmcContainer.XbmcBookmarks, row(T2.[XbmcBookmark_File.XbmcBookmark_File_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcBookmark]) AS [XbmcBookmark_File.XbmcBookmark_File_Source], 
            T2.[XbmcBookmark_File.XbmcBookmark_File_Target]
        FROM (
            SELECT -- Constructing XbmcBookmark_File_Target
                T1.[XbmcBookmark_File.XbmcBookmark_File_Source.Id], 
                CreateRef(XbmcContainer.Files, row(T1.[XbmcBookmark_File.XbmcBookmark_File_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcFile]) AS [XbmcBookmark_File.XbmcBookmark_File_Target]
            FROM (
                SELECT 
                    T.idBookmark AS [XbmcBookmark_File.XbmcBookmark_File_Source.Id], 
                    T.idFile AS [XbmcBookmark_File.XbmcBookmark_File_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcBookmark AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Paths.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Paths
        [Frost.Providers.Xbmc.DB.XbmcPath](T1.XbmcPath_Id, T1.XbmcPath_FolderPath, T1.XbmcPath_ContentType, T1.XbmcPath_Scraper, T1.XbmcPath_Hash, T1.XbmcPath_ScanRecursive, T1.XbmcPath_UseFolderNames, T1.XbmcPath_Settings, T1.XbmcPath_NoUpdate, T1.XbmcPath_Exclude, T1.XbmcPath_DateAdded)
    FROM (
        SELECT 
            T.idPath AS XbmcPath_Id, 
            T.strPath AS XbmcPath_FolderPath, 
            T.strContent AS XbmcPath_ContentType, 
            T.strScraper AS XbmcPath_Scraper, 
            T.strHash AS XbmcPath_Hash, 
            T.scanRecursive AS XbmcPath_ScanRecursive, 
            T.useFolderNames AS XbmcPath_UseFolderNames, 
            T.strSettings AS XbmcPath_Settings, 
            T.noUpdate AS XbmcPath_NoUpdate, 
            T.exclude AS XbmcPath_Exclude, 
            T.dateAdded AS XbmcPath_DateAdded, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcPath AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.StreamDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StreamDetails
        CASE
            WHEN T1._from1 THEN [Frost.Providers.Xbmc.DB.XbmcAudioDetails](T1.XbmcDbStreamDetails_Id, T1.XbmcDbStreamDetails_FileId, T1.XbmcAudioDetails_Codec, T1.XbmcAudioDetails_Channels, T1.XbmcAudioDetails_Language)
            WHEN T1._from2 THEN [Frost.Providers.Xbmc.DB.XbmcSubtitleDetails](T1.XbmcDbStreamDetails_Id, T1.XbmcDbStreamDetails_FileId, T1.XbmcSubtitleDetails_Language)
            ELSE [Frost.Providers.Xbmc.DB.XbmcVideoDetails](T1.XbmcDbStreamDetails_Id, T1.XbmcDbStreamDetails_FileId, T1.XbmcVideoDetails_Codec, T1.XbmcVideoDetails_Aspect, T1.XbmcVideoDetails_Width, T1.XbmcVideoDetails_Height, T1.XbmcVideoDetails_Duration)
        END
    FROM (
        SELECT 
            T.idStream AS XbmcDbStreamDetails_Id, 
            T.idFile AS XbmcDbStreamDetails_FileId, 
            T.strAudioCodec AS XbmcAudioDetails_Codec, 
            T.iAudioChannels AS XbmcAudioDetails_Channels, 
            T.strAudioLanguage AS XbmcAudioDetails_Language, 
            T.strSubtitleLanguage AS XbmcSubtitleDetails_Language, 
            T.strVideoCodec AS XbmcVideoDetails_Codec, 
            T.fVideoAspect AS XbmcVideoDetails_Aspect, 
            T.iVideoWidth AS XbmcVideoDetails_Width, 
            T.iVideoHeight AS XbmcVideoDetails_Height, 
            T.iVideoDuration AS XbmcVideoDetails_Duration, 
            CASE WHEN T.iStreamType = CAST('0' AS [Edm.Int32]) THEN True ELSE False END AS _from0, 
            CASE WHEN T.iStreamType = CAST('1' AS [Edm.Int32]) THEN True ELSE False END AS _from1, 
            CASE WHEN T.iStreamType = CAST('2' AS [Edm.Int32]) THEN True ELSE False END AS _from2, 
            True AS _from3
        FROM CodeFirstDatabase.XbmcDbStreamDetails AS T
        WHERE T.iStreamType IN {CAST('1' AS [Edm.Int32]), CAST('2' AS [Edm.Int32]), CAST('0' AS [Edm.Int32])}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Genres.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Genres
        [Frost.Providers.Xbmc.DB.XbmcGenre](T1.XbmcGenre_Id, T1.XbmcGenre_Name)
    FROM (
        SELECT 
            T.idGenre AS XbmcGenre_Id, 
            T.strGenre AS XbmcGenre_Name, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcGenre AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Sets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sets
        [Frost.Providers.Xbmc.DB.XbmcSet](T1.XbmcSet_Id, T1.XbmcSet_Name)
    FROM (
        SELECT 
            T.idSet AS XbmcSet_Id, 
            T.strSet AS XbmcSet_Name, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcSet AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Studios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Studios
        [Frost.Providers.Xbmc.DB.XbmcStudio](T1.XbmcStudio_Id, T1.XbmcStudio_Name)
    FROM (
        SELECT 
            T.idStudio AS XbmcStudio_Id, 
            T.strStudio AS XbmcStudio_Name, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcStudio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Settings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Settings
        [Frost.Providers.Xbmc.DB.XbmcSettings](T1.XbmcSettings_Id, T1.XbmcSettings_FileId, T1.XbmcSettings_Deinterlace, T1.XbmcSettings_ViewMode, T1.XbmcSettings_ZoomAmount, T1.XbmcSettings_PixelRatio, T1.XbmcSettings_VerticalShift, T1.XbmcSettings_AudioStream, T1.XbmcSettings_SubtitleStream, T1.XbmcSettings_SubtitleDelay, T1.XbmcSettings_SubtitlesOn, T1.XbmcSettings_Brightness, T1.XbmcSettings_Contrast, T1.XbmcSettings_Gamma, T1.XbmcSettings_VolumeAmplification, T1.XbmcSettings_AudioDelay, T1.XbmcSettings_OutputToAllSpeakers, T1.XbmcSettings_ResumeTime, T1.XbmcSettings_Crop, T1.XbmcSettings_CropLeft, T1.XbmcSettings_CropRight, T1.XbmcSettings_CropTop, T1.XbmcSettings_CropBottom, T1.XbmcSettings_Sharpness, T1.XbmcSettings_NoiseReduction, T1.XbmcSettings_NonLinearStretch, T1.XbmcSettings_PostProcess, T1.XbmcSettings_ScalingMethod, T1.XbmcSettings_DeinterlaceMode)
    FROM (
        SELECT 
            T.idSetting AS XbmcSettings_Id, 
            T.idFile AS XbmcSettings_FileId, 
            T.Deinterlace AS XbmcSettings_Deinterlace, 
            CAST(T.ViewMode AS [Frost.Providers.Xbmc.DB.XbmcViewMode]) AS XbmcSettings_ViewMode, 
            T.ZoomAmount AS XbmcSettings_ZoomAmount, 
            T.PixelRatio AS XbmcSettings_PixelRatio, 
            T.VerticalShift AS XbmcSettings_VerticalShift, 
            T.AudioStream AS XbmcSettings_AudioStream, 
            T.SubtitleStream AS XbmcSettings_SubtitleStream, 
            T.SubtitleDelay AS XbmcSettings_SubtitleDelay, 
            T.SubtitlesOn AS XbmcSettings_SubtitlesOn, 
            T.Brightness AS XbmcSettings_Brightness, 
            T.Contrast AS XbmcSettings_Contrast, 
            T.Gamma AS XbmcSettings_Gamma, 
            T.VolumeAmplification AS XbmcSettings_VolumeAmplification, 
            T.AudioDelay AS XbmcSettings_AudioDelay, 
            T.OutputToAllSpeakers AS XbmcSettings_OutputToAllSpeakers, 
            T.ResumeTime AS XbmcSettings_ResumeTime, 
            T.Crop AS XbmcSettings_Crop, 
            T.CropLeft AS XbmcSettings_CropLeft, 
            T.CropRight AS XbmcSettings_CropRight, 
            T.CropTop AS XbmcSettings_CropTop, 
            T.CropBottom AS XbmcSettings_CropBottom, 
            T.Sharpness AS XbmcSettings_Sharpness, 
            T.NoiseReduction AS XbmcSettings_NoiseReduction, 
            T.NonLinStretch AS XbmcSettings_NonLinearStretch, 
            T.PostProcess AS XbmcSettings_PostProcess, 
            CAST(T.ScalingMethod AS [Frost.Providers.Xbmc.DB.XbmcScalingMethod]) AS XbmcSettings_ScalingMethod, 
            CAST(T.DeinterlaceMode AS [Frost.Providers.Xbmc.DB.XbmcDeinterlaceMode]) AS XbmcSettings_DeinterlaceMode, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcSettings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcDbMovie_Directors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcDbMovie_Directors
        [Frost.Providers.Xbmc.DB.XbmcDbMovie_Directors](T3.[XbmcDbMovie_Directors.XbmcDbMovie_Directors_Source], T3.[XbmcDbMovie_Directors.XbmcDbMovie_Directors_Target])
    FROM (
        SELECT -- Constructing XbmcDbMovie_Directors_Source
            CreateRef(XbmcContainer.Movies, row(T2.[XbmcDbMovie_Directors.XbmcDbMovie_Directors_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcDbMovie_Directors.XbmcDbMovie_Directors_Source], 
            T2.[XbmcDbMovie_Directors.XbmcDbMovie_Directors_Target]
        FROM (
            SELECT -- Constructing XbmcDbMovie_Directors_Target
                T1.[XbmcDbMovie_Directors.XbmcDbMovie_Directors_Source.Id], 
                CreateRef(XbmcContainer.People, row(T1.[XbmcDbMovie_Directors.XbmcDbMovie_Directors_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcPerson]) AS [XbmcDbMovie_Directors.XbmcDbMovie_Directors_Target]
            FROM (
                SELECT 
                    T.idMovie AS [XbmcDbMovie_Directors.XbmcDbMovie_Directors_Source.Id], 
                    T.idDirector AS [XbmcDbMovie_Directors.XbmcDbMovie_Directors_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcDbMovieXbmcPerson AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcGenre_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcGenre_Movies
        [Frost.Providers.Xbmc.DB.XbmcGenre_Movies](T3.[XbmcGenre_Movies.XbmcGenre_Movies_Source], T3.[XbmcGenre_Movies.XbmcGenre_Movies_Target])
    FROM (
        SELECT -- Constructing XbmcGenre_Movies_Source
            CreateRef(XbmcContainer.Genres, row(T2.[XbmcGenre_Movies.XbmcGenre_Movies_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcGenre]) AS [XbmcGenre_Movies.XbmcGenre_Movies_Source], 
            T2.[XbmcGenre_Movies.XbmcGenre_Movies_Target]
        FROM (
            SELECT -- Constructing XbmcGenre_Movies_Target
                T1.[XbmcGenre_Movies.XbmcGenre_Movies_Source.Id], 
                CreateRef(XbmcContainer.Movies, row(T1.[XbmcGenre_Movies.XbmcGenre_Movies_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcGenre_Movies.XbmcGenre_Movies_Target]
            FROM (
                SELECT 
                    T.idGenre AS [XbmcGenre_Movies.XbmcGenre_Movies_Source.Id], 
                    T.idMovie AS [XbmcGenre_Movies.XbmcGenre_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcGenreXbmcDbMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcStudio_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcStudio_Movies
        [Frost.Providers.Xbmc.DB.XbmcStudio_Movies](T3.[XbmcStudio_Movies.XbmcStudio_Movies_Source], T3.[XbmcStudio_Movies.XbmcStudio_Movies_Target])
    FROM (
        SELECT -- Constructing XbmcStudio_Movies_Source
            CreateRef(XbmcContainer.Studios, row(T2.[XbmcStudio_Movies.XbmcStudio_Movies_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcStudio]) AS [XbmcStudio_Movies.XbmcStudio_Movies_Source], 
            T2.[XbmcStudio_Movies.XbmcStudio_Movies_Target]
        FROM (
            SELECT -- Constructing XbmcStudio_Movies_Target
                T1.[XbmcStudio_Movies.XbmcStudio_Movies_Source.Id], 
                CreateRef(XbmcContainer.Movies, row(T1.[XbmcStudio_Movies.XbmcStudio_Movies_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcStudio_Movies.XbmcStudio_Movies_Target]
            FROM (
                SELECT 
                    T.idStudio AS [XbmcStudio_Movies.XbmcStudio_Movies_Source.Id], 
                    T.idMovie AS [XbmcStudio_Movies.XbmcStudio_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcStudioXbmcDbMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcDbMovie_Writers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcDbMovie_Writers
        [Frost.Providers.Xbmc.DB.XbmcDbMovie_Writers](T3.[XbmcDbMovie_Writers.XbmcDbMovie_Writers_Source], T3.[XbmcDbMovie_Writers.XbmcDbMovie_Writers_Target])
    FROM (
        SELECT -- Constructing XbmcDbMovie_Writers_Source
            CreateRef(XbmcContainer.Movies, row(T2.[XbmcDbMovie_Writers.XbmcDbMovie_Writers_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcDbMovie_Writers.XbmcDbMovie_Writers_Source], 
            T2.[XbmcDbMovie_Writers.XbmcDbMovie_Writers_Target]
        FROM (
            SELECT -- Constructing XbmcDbMovie_Writers_Target
                T1.[XbmcDbMovie_Writers.XbmcDbMovie_Writers_Source.Id], 
                CreateRef(XbmcContainer.People, row(T1.[XbmcDbMovie_Writers.XbmcDbMovie_Writers_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcPerson]) AS [XbmcDbMovie_Writers.XbmcDbMovie_Writers_Target]
            FROM (
                SELECT 
                    T.idMovie AS [XbmcDbMovie_Writers.XbmcDbMovie_Writers_Source.Id], 
                    T.idWriter AS [XbmcDbMovie_Writers.XbmcDbMovie_Writers_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcDbMovieXbmcPerson1 AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.XbmcCountry_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcCountry_Movies
        [Frost.Providers.Xbmc.DB.XbmcCountry_Movies](T3.[XbmcCountry_Movies.XbmcCountry_Movies_Source], T3.[XbmcCountry_Movies.XbmcCountry_Movies_Target])
    FROM (
        SELECT -- Constructing XbmcCountry_Movies_Source
            CreateRef(XbmcContainer.Countries, row(T2.[XbmcCountry_Movies.XbmcCountry_Movies_Source.Id]), [Frost.Providers.Xbmc.DB.XbmcCountry]) AS [XbmcCountry_Movies.XbmcCountry_Movies_Source], 
            T2.[XbmcCountry_Movies.XbmcCountry_Movies_Target]
        FROM (
            SELECT -- Constructing XbmcCountry_Movies_Target
                T1.[XbmcCountry_Movies.XbmcCountry_Movies_Source.Id], 
                CreateRef(XbmcContainer.Movies, row(T1.[XbmcCountry_Movies.XbmcCountry_Movies_Target.Id]), [Frost.Providers.Xbmc.DB.XbmcDbMovie]) AS [XbmcCountry_Movies.XbmcCountry_Movies_Target]
            FROM (
                SELECT 
                    T.idCountry AS [XbmcCountry_Movies.XbmcCountry_Movies_Source.Id], 
                    T.idMovie AS [XbmcCountry_Movies.XbmcCountry_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.XbmcCountryXbmcDbMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcTagLink.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcTagLink
        [CodeFirstDatabaseSchema.XbmcTagLink](T1.XbmcTagLink_idTag, T1.XbmcTagLink_idMedia, T1.[XbmcTagLink.media_type])
    FROM (
        SELECT 
            T.TagId AS XbmcTagLink_idTag, 
            T.MediaId AS XbmcTagLink_idMedia, 
            T.MediaType AS [XbmcTagLink.media_type], 
            True AS _from0
        FROM XbmcContainer.TagLinks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcTag.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcTag
        [CodeFirstDatabaseSchema.XbmcTag](T1.XbmcTag_idTag, T1.XbmcTag_strTag)
    FROM (
        SELECT 
            T.Id AS XbmcTag_idTag, 
            T.Name AS XbmcTag_strTag, 
            True AS _from0
        FROM XbmcContainer.Tags AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.TagLinks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TagLinks
        [Frost.Providers.Xbmc.DB.XbmcTagLink](T1.XbmcTagLink_TagId, T1.XbmcTagLink_MediaId, T1.XbmcTagLink_MediaType)
    FROM (
        SELECT 
            T.idTag AS XbmcTagLink_TagId, 
            T.idMedia AS XbmcTagLink_MediaId, 
            T.media_type AS XbmcTagLink_MediaType, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcTagLink AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Tags.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tags
        [Frost.Providers.Xbmc.DB.XbmcTag](T1.XbmcTag_Id, T1.XbmcTag_Name)
    FROM (
        SELECT 
            T.idTag AS XbmcTag_Id, 
            T.strTag AS XbmcTag_Name, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcTag AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.XbmcVersion.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing XbmcVersion
        [CodeFirstDatabaseSchema.XbmcVersion](T1.XbmcVersion_idVersion, T1.XbmcVersion_idCompressCount)
    FROM (
        SELECT 
            T.Version AS XbmcVersion_idVersion, 
            T.CompressCountId AS XbmcVersion_idCompressCount, 
            True AS _from0
        FROM XbmcContainer.Version AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for XbmcContainer.Version.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Version
        [Frost.Providers.Xbmc.DB.XbmcVersion](T1.XbmcVersion_Version, T1.XbmcVersion_CompressCountId)
    FROM (
        SELECT 
            T.idVersion AS XbmcVersion_Version, 
            T.idCompressCount AS XbmcVersion_CompressCountId, 
            True AS _from0
        FROM CodeFirstDatabase.XbmcVersion AS T
    ) AS T1");
        }
    }
}
