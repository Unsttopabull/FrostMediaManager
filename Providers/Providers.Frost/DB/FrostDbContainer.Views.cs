//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Frost.Providers.Frost.DB.FrostDbContainer),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets83c6d9d4cde446a3196b08049e62d32f89b9c4854e20f6fc67c480af05af5620))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets83c6d9d4cde446a3196b08049e62d32f89b9c4854e20f6fc67c480af05af5620 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "83c6d9d4cde446a3196b08049e62d32f89b9c4854e20f6fc67c480af05af5620"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Art")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Movie")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Actor")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Person")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Audio")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.File")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Subtitle")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Language")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.Video")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.Award")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.Certification")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.Country")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.Genre")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.Plot")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.PromotionalVideo")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.Rating")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.Set")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.Special")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.Studio")
            {
                return GetView18();
            }

            if (extentName == "CodeFirstDatabase.PersonMovie")
            {
                return GetView19();
            }

            if (extentName == "CodeFirstDatabase.PersonMovie1")
            {
                return GetView20();
            }

            if (extentName == "CodeFirstDatabase.AwardMovie")
            {
                return GetView21();
            }

            if (extentName == "CodeFirstDatabase.CountryMovie")
            {
                return GetView22();
            }

            if (extentName == "CodeFirstDatabase.GenreMovie")
            {
                return GetView23();
            }

            if (extentName == "CodeFirstDatabase.SpecialMovie")
            {
                return GetView24();
            }

            if (extentName == "CodeFirstDatabase.StudioMovie")
            {
                return GetView25();
            }

            if (extentName == "FrostDbContainer.Art")
            {
                return GetView26();
            }

            if (extentName == "FrostDbContainer.Movies")
            {
                return GetView27();
            }

            if (extentName == "FrostDbContainer.Actors")
            {
                return GetView28();
            }

            if (extentName == "FrostDbContainer.People")
            {
                return GetView29();
            }

            if (extentName == "FrostDbContainer.AudioDetails")
            {
                return GetView30();
            }

            if (extentName == "FrostDbContainer.Files")
            {
                return GetView31();
            }

            if (extentName == "FrostDbContainer.Subtitles")
            {
                return GetView32();
            }

            if (extentName == "FrostDbContainer.Languages")
            {
                return GetView33();
            }

            if (extentName == "FrostDbContainer.VideoDetails")
            {
                return GetView34();
            }

            if (extentName == "FrostDbContainer.Awards")
            {
                return GetView35();
            }

            if (extentName == "FrostDbContainer.Certifications")
            {
                return GetView36();
            }

            if (extentName == "FrostDbContainer.Countries")
            {
                return GetView37();
            }

            if (extentName == "FrostDbContainer.Genres")
            {
                return GetView38();
            }

            if (extentName == "FrostDbContainer.Plots")
            {
                return GetView39();
            }

            if (extentName == "FrostDbContainer.PromotionalVideos")
            {
                return GetView40();
            }

            if (extentName == "FrostDbContainer.Ratings")
            {
                return GetView41();
            }

            if (extentName == "FrostDbContainer.Sets")
            {
                return GetView42();
            }

            if (extentName == "FrostDbContainer.Specials")
            {
                return GetView43();
            }

            if (extentName == "FrostDbContainer.Studios")
            {
                return GetView44();
            }

            if (extentName == "FrostDbContainer.Person_MoviesAsDirector")
            {
                return GetView45();
            }

            if (extentName == "FrostDbContainer.Person_MoviesAsWriter")
            {
                return GetView46();
            }

            if (extentName == "FrostDbContainer.Award_Movies")
            {
                return GetView47();
            }

            if (extentName == "FrostDbContainer.Country_Movies")
            {
                return GetView48();
            }

            if (extentName == "FrostDbContainer.Genre_Movies")
            {
                return GetView49();
            }

            if (extentName == "FrostDbContainer.Special_Movies")
            {
                return GetView50();
            }

            if (extentName == "FrostDbContainer.Studio_Movies")
            {
                return GetView51();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Art.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Art
        [CodeFirstDatabaseSchema.Art](T1.Art_Id, T1.Art_Type, T1.Art_Path, T1.Art_Preview, T1.Art_MovieId)
    FROM (
        SELECT 
            T.Id AS Art_Id, 
            CAST(T.Type AS [Edm.Int64]) AS Art_Type, 
            T.Path AS Art_Path, 
            T.Preview AS Art_Preview, 
            T.MovieId AS Art_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Art AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Movie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Movie
        [CodeFirstDatabaseSchema.Movie](T1.Movie_Id, T1.Movie_Title, T1.Movie_OriginalTitle, T1.Movie_SortTitle, T1.Movie_Type, T1.Movie_Goofs, T1.Movie_Trivia, T1.Movie_ReleaseYear, T1.Movie_ReleaseDate, T1.Movie_Edithion, T1.Movie_DvdRegion, T1.Movie_LastPlayed, T1.Movie_Premiered, T1.Movie_Aired, T1.Movie_Trailer, T1.Movie_Top250, T1.Movie_Runtime, T1.Movie_Watched, T1.Movie_PlayCount, T1.Movie_RatingAverage, T1.Movie_ImdbID, T1.Movie_TmdbID, T1.Movie_ReleaseGroup, T1.Movie_IsMultipart, T1.Movie_PartTypes, T1.Movie_DirectoryPath, T1.Movie_NumberOfAudioChannels, T1.Movie_AudioCodec, T1.Movie_VideoResolution, T1.Movie_VideoCodec, T1.Movie_SetId)
    FROM (
        SELECT 
            T.Id AS Movie_Id, 
            T.Title AS Movie_Title, 
            T.OriginalTitle AS Movie_OriginalTitle, 
            T.SortTitle AS Movie_SortTitle, 
            CAST(T.Type AS [Edm.Int32]) AS Movie_Type, 
            T.Goofs AS Movie_Goofs, 
            T.Trivia AS Movie_Trivia, 
            T.ReleaseYear AS Movie_ReleaseYear, 
            T.ReleaseDate AS Movie_ReleaseDate, 
            T.Edithion AS Movie_Edithion, 
            CAST(T.DvdRegion AS [Edm.Int32]) AS Movie_DvdRegion, 
            T.LastPlayed AS Movie_LastPlayed, 
            T.Premiered AS Movie_Premiered, 
            T.Aired AS Movie_Aired, 
            T.Trailer AS Movie_Trailer, 
            T.Top250 AS Movie_Top250, 
            T.Runtime AS Movie_Runtime, 
            T.Watched AS Movie_Watched, 
            T.PlayCount AS Movie_PlayCount, 
            T.RatingAverage AS Movie_RatingAverage, 
            T.ImdbID AS Movie_ImdbID, 
            T.TmdbID AS Movie_TmdbID, 
            T.ReleaseGroup AS Movie_ReleaseGroup, 
            T.IsMultipart AS Movie_IsMultipart, 
            T.PartTypes AS Movie_PartTypes, 
            T.DirectoryPath AS Movie_DirectoryPath, 
            T.NumberOfAudioChannels AS Movie_NumberOfAudioChannels, 
            T.AudioCodec AS Movie_AudioCodec, 
            T.VideoResolution AS Movie_VideoResolution, 
            T.VideoCodec AS Movie_VideoCodec, 
            T.SetId AS Movie_SetId, 
            True AS _from0
        FROM FrostDbContainer.Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Actor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Actor
        [CodeFirstDatabaseSchema.Actor](T1.Actor_Id, T1.Actor_Character, T1.Actor_MovieId, T1.Actor_PersonId)
    FROM (
        SELECT 
            T.Id AS Actor_Id, 
            T.Character AS Actor_Character, 
            T.MovieId AS Actor_MovieId, 
            T.PersonId AS Actor_PersonId, 
            True AS _from0
        FROM FrostDbContainer.Actors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [CodeFirstDatabaseSchema.Person](T1.Person_Id, T1.Person_Name, T1.Person_Thumb, T1.Person_ImdbID)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Name AS Person_Name, 
            T.Thumb AS Person_Thumb, 
            T.ImdbID AS Person_ImdbID, 
            True AS _from0
        FROM FrostDbContainer.People AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Audio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Audio
        [CodeFirstDatabaseSchema.Audio](T1.Audio_Id, T1.Audio_Source, T1.Audio_Type, T1.Audio_ChannelSetup, T1.Audio_NumberOfChannels, T1.Audio_ChannelPositions, T1.Audio_Codec, T1.Audio_CodecId, T1.Audio_BitRate, T1.Audio_BitRateMode, T1.Audio_SamplingRate, T1.Audio_BitDepth, T1.Audio_CompressionMode, T1.Audio_Duration, T1.Audio_LanguageId, T1.Audio_MovieId, T1.Audio_FileId)
    FROM (
        SELECT 
            T.Id AS Audio_Id, 
            T.Source AS Audio_Source, 
            T.Type AS Audio_Type, 
            T.ChannelSetup AS Audio_ChannelSetup, 
            T.NumberOfChannels AS Audio_NumberOfChannels, 
            T.ChannelPositions AS Audio_ChannelPositions, 
            T.Codec AS Audio_Codec, 
            T.CodecId AS Audio_CodecId, 
            CAST(T.BitRate AS [Edm.Double]) AS Audio_BitRate, 
            CAST(T.BitRateMode AS [Edm.Int64]) AS Audio_BitRateMode, 
            T.SamplingRate AS Audio_SamplingRate, 
            T.BitDepth AS Audio_BitDepth, 
            CAST(T.CompressionMode AS [Edm.Int64]) AS Audio_CompressionMode, 
            T.Duration AS Audio_Duration, 
            T.LanguageId AS Audio_LanguageId, 
            T.MovieId AS Audio_MovieId, 
            T.FileId AS Audio_FileId, 
            True AS _from0
        FROM FrostDbContainer.AudioDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.File.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing File
        [CodeFirstDatabaseSchema.File](T1.File_Id, T1.File_Extension, T1.File_Name, T1.File_FolderPath, T1.File_Size, T1.File_DateAdded)
    FROM (
        SELECT 
            T.Id AS File_Id, 
            T.Extension AS File_Extension, 
            T.Name AS File_Name, 
            T.FolderPath AS File_FolderPath, 
            T.Size AS File_Size, 
            T.DateAdded AS File_DateAdded, 
            True AS _from0
        FROM FrostDbContainer.Files AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Subtitle.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Subtitle
        [CodeFirstDatabaseSchema.Subtitle](T1.Subtitle_Id, T1.Subtitle_PodnapisiId, T1.Subtitle_OpenSubtitlesId, T1.Subtitle_MD5, T1.Subtitle_Format, T1.Subtitle_Encoding, T1.Subtitle_EmbededInVideo, T1.Subtitle_ForHearingImpaired, T1.Subtitle_LanguageId, T1.Subtitle_MovieId, T1.Subtitle_FileId)
    FROM (
        SELECT 
            T.Id AS Subtitle_Id, 
            T.PodnapisiId AS Subtitle_PodnapisiId, 
            T.OpenSubtitlesId AS Subtitle_OpenSubtitlesId, 
            T.MD5 AS Subtitle_MD5, 
            T.Format AS Subtitle_Format, 
            T.Encoding AS Subtitle_Encoding, 
            T.EmbededInVideo AS Subtitle_EmbededInVideo, 
            T.ForHearingImpaired AS Subtitle_ForHearingImpaired, 
            T.LanguageId AS Subtitle_LanguageId, 
            T.MovieId AS Subtitle_MovieId, 
            T.FileId AS Subtitle_FileId, 
            True AS _from0
        FROM FrostDbContainer.Subtitles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Language.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Language
        [CodeFirstDatabaseSchema.Language](T1.Language_Id, T1.Language_Name, T1.[Language.ISO639_Alpha2], T1.[Language.ISO639_Alpha3])
    FROM (
        SELECT 
            T.Id AS Language_Id, 
            T.Name AS Language_Name, 
            T.ISO639.Alpha2 AS [Language.ISO639_Alpha2], 
            T.ISO639.Alpha3 AS [Language.ISO639_Alpha3], 
            True AS _from0
        FROM FrostDbContainer.Languages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Video.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Video
        [CodeFirstDatabaseSchema.Video](T1.Video_Id, T1.Video_MovieHash, T1.Video_Source, T1.Video_Type, T1.Video_Resolution, T1.Video_ResolutionName, T1.Video_Standard, T1.Video_FPS, T1.Video_BitRate, T1.Video_BitRateMode, T1.Video_BitDepth, T1.Video_CompressionMode, T1.Video_Duration, T1.Video_ScanType, T1.Video_ColorSpace, T1.Video_ChromaSubsampling, T1.Video_Format, T1.Video_Codec, T1.Video_CodecId, T1.Video_Aspect, T1.Video_AspectCommercialName, T1.Video_Width, T1.Video_Height, T1.Video_LanguageId, T1.Video_MovieId, T1.Video_FileId)
    FROM (
        SELECT 
            T.Id AS Video_Id, 
            T.MovieHash AS Video_MovieHash, 
            T.Source AS Video_Source, 
            T.Type AS Video_Type, 
            T.Resolution AS Video_Resolution, 
            T.ResolutionName AS Video_ResolutionName, 
            T.Standard AS Video_Standard, 
            CAST(T.FPS AS [Edm.Double]) AS Video_FPS, 
            CAST(T.BitRate AS [Edm.Double]) AS Video_BitRate, 
            CAST(T.BitRateMode AS [Edm.Int64]) AS Video_BitRateMode, 
            T.BitDepth AS Video_BitDepth, 
            CAST(T.CompressionMode AS [Edm.Int64]) AS Video_CompressionMode, 
            T.Duration AS Video_Duration, 
            CAST(T.ScanType AS [Edm.Int64]) AS Video_ScanType, 
            T.ColorSpace AS Video_ColorSpace, 
            T.ChromaSubsampling AS Video_ChromaSubsampling, 
            T.Format AS Video_Format, 
            T.Codec AS Video_Codec, 
            T.CodecId AS Video_CodecId, 
            T.Aspect AS Video_Aspect, 
            T.AspectCommercialName AS Video_AspectCommercialName, 
            T.Width AS Video_Width, 
            T.Height AS Video_Height, 
            T.LanguageId AS Video_LanguageId, 
            T.MovieId AS Video_MovieId, 
            T.FileId AS Video_FileId, 
            True AS _from0
        FROM FrostDbContainer.VideoDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Award.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Award
        [CodeFirstDatabaseSchema.Award](T1.Award_Id, T1.Award_Organization, T1.Award_IsNomination, T1.Award_AwardType)
    FROM (
        SELECT 
            T.Id AS Award_Id, 
            T.Organization AS Award_Organization, 
            T.IsNomination AS Award_IsNomination, 
            T.AwardType AS Award_AwardType, 
            True AS _from0
        FROM FrostDbContainer.Awards AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Certification.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Certification
        [CodeFirstDatabaseSchema.Certification](T1.Certification_Id, T1.Certification_Rating, T1.Certification_MovieId, T1.Certification_CountryId)
    FROM (
        SELECT 
            T.Id AS Certification_Id, 
            T.Rating AS Certification_Rating, 
            T.MovieId AS Certification_MovieId, 
            T.CountryId AS Certification_CountryId, 
            True AS _from0
        FROM FrostDbContainer.Certifications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Country.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Country
        [CodeFirstDatabaseSchema.Country](T1.Country_Id, T1.Country_Name, T1.[Country.ISO3166_Alpha2], T1.[Country.ISO3166_Alpha3])
    FROM (
        SELECT 
            T.Id AS Country_Id, 
            T.Name AS Country_Name, 
            T.ISO3166.Alpha2 AS [Country.ISO3166_Alpha2], 
            T.ISO3166.Alpha3 AS [Country.ISO3166_Alpha3], 
            True AS _from0
        FROM FrostDbContainer.Countries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Genre.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Genre
        [CodeFirstDatabaseSchema.Genre](T1.Genre_Id, T1.Genre_Name)
    FROM (
        SELECT 
            T.Id AS Genre_Id, 
            T.Name AS Genre_Name, 
            True AS _from0
        FROM FrostDbContainer.Genres AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Plot.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Plot
        [CodeFirstDatabaseSchema.Plot](T1.Plot_Id, T1.Plot_Tagline, T1.Plot_Summary, T1.Plot_Full, T1.Plot_Language, T1.Plot_MovieId)
    FROM (
        SELECT 
            T.Id AS Plot_Id, 
            T.Tagline AS Plot_Tagline, 
            T.Summary AS Plot_Summary, 
            T.[Full] AS Plot_Full, 
            T.Language AS Plot_Language, 
            T.MovieId AS Plot_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Plots AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PromotionalVideo.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PromotionalVideo
        [CodeFirstDatabaseSchema.PromotionalVideo](T1.PromotionalVideo_Id, T1.PromotionalVideo_Type, T1.PromotionalVideo_Title, T1.PromotionalVideo_Url, T1.PromotionalVideo_Duration, T1.PromotionalVideo_Language, T1.PromotionalVideo_SubtitleLanguage, T1.PromotionalVideo_MovieId)
    FROM (
        SELECT 
            T.Id AS PromotionalVideo_Id, 
            CAST(T.Type AS [Edm.Int32]) AS PromotionalVideo_Type, 
            T.Title AS PromotionalVideo_Title, 
            T.Url AS PromotionalVideo_Url, 
            T.Duration AS PromotionalVideo_Duration, 
            T.Language AS PromotionalVideo_Language, 
            T.SubtitleLanguage AS PromotionalVideo_SubtitleLanguage, 
            T.MovieId AS PromotionalVideo_MovieId, 
            True AS _from0
        FROM FrostDbContainer.PromotionalVideos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Rating.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Rating
        [CodeFirstDatabaseSchema.Rating](T1.Rating_Id, T1.Rating_Critic, T1.Rating_Value, T1.Rating_MovieId)
    FROM (
        SELECT 
            T.Id AS Rating_Id, 
            T.Critic AS Rating_Critic, 
            T.[Value] AS Rating_Value, 
            T.MovieId AS Rating_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Ratings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Set.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Set
        [CodeFirstDatabaseSchema.Set](T1.Set_Id, T1.Set_Name)
    FROM (
        SELECT 
            T.Id AS Set_Id, 
            T.Name AS Set_Name, 
            True AS _from0
        FROM FrostDbContainer.Sets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Special.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Special
        [CodeFirstDatabaseSchema.Special](T1.Special_Id, T1.Special_Value)
    FROM (
        SELECT 
            T.Id AS Special_Id, 
            T.[Value] AS Special_Value, 
            True AS _from0
        FROM FrostDbContainer.Specials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Studio.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Studio
        [CodeFirstDatabaseSchema.Studio](T1.Studio_Id, T1.Studio_Name)
    FROM (
        SELECT 
            T.Id AS Studio_Id, 
            T.Name AS Studio_Name, 
            True AS _from0
        FROM FrostDbContainer.Studios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PersonMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonMovie
        [CodeFirstDatabaseSchema.PersonMovie](T1.PersonMovie_DirectorId, T1.PersonMovie_MovieId)
    FROM (
        SELECT 
            Key(T.Person_MoviesAsDirector_Source).Id AS PersonMovie_DirectorId, 
            Key(T.Person_MoviesAsDirector_Target).Id AS PersonMovie_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Person_MoviesAsDirector AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PersonMovie1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonMovie1
        [CodeFirstDatabaseSchema.PersonMovie1](T1.PersonMovie1_WriterId, T1.PersonMovie1_MovieId)
    FROM (
        SELECT 
            Key(T.Person_MoviesAsWriter_Source).Id AS PersonMovie1_WriterId, 
            Key(T.Person_MoviesAsWriter_Target).Id AS PersonMovie1_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Person_MoviesAsWriter AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AwardMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AwardMovie
        [CodeFirstDatabaseSchema.AwardMovie](T1.AwardMovie_AwardId, T1.AwardMovie_MovieId)
    FROM (
        SELECT 
            Key(T.Award_Movies_Source).Id AS AwardMovie_AwardId, 
            Key(T.Award_Movies_Target).Id AS AwardMovie_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Award_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.CountryMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CountryMovie
        [CodeFirstDatabaseSchema.CountryMovie](T1.CountryMovie_CountryId, T1.CountryMovie_MovieId)
    FROM (
        SELECT 
            Key(T.Country_Movies_Source).Id AS CountryMovie_CountryId, 
            Key(T.Country_Movies_Target).Id AS CountryMovie_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Country_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.GenreMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GenreMovie
        [CodeFirstDatabaseSchema.GenreMovie](T1.GenreMovie_GenreId, T1.GenreMovie_MovieId)
    FROM (
        SELECT 
            Key(T.Genre_Movies_Source).Id AS GenreMovie_GenreId, 
            Key(T.Genre_Movies_Target).Id AS GenreMovie_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Genre_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.SpecialMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SpecialMovie
        [CodeFirstDatabaseSchema.SpecialMovie](T1.SpecialMovie_SpecialId, T1.SpecialMovie_MovieId)
    FROM (
        SELECT 
            Key(T.Special_Movies_Source).Id AS SpecialMovie_SpecialId, 
            Key(T.Special_Movies_Target).Id AS SpecialMovie_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Special_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.StudioMovie.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StudioMovie
        [CodeFirstDatabaseSchema.StudioMovie](T1.StudioMovie_StudioId, T1.StudioMovie_MovieId)
    FROM (
        SELECT 
            Key(T.Studio_Movies_Source).Id AS StudioMovie_StudioId, 
            Key(T.Studio_Movies_Target).Id AS StudioMovie_MovieId, 
            True AS _from0
        FROM FrostDbContainer.Studio_Movies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Art.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Art
        [Frost.Providers.Frost.DB.Art](T1.Art_Id, T1.Art_Type, T1.Art_Path, T1.Art_Preview, T1.Art_MovieId)
    FROM (
        SELECT 
            T.Id AS Art_Id, 
            CAST(T.Type AS [Frost.Providers.Frost.DB.ArtType]) AS Art_Type, 
            T.Path AS Art_Path, 
            T.Preview AS Art_Preview, 
            T.MovieId AS Art_MovieId, 
            True AS _from0
        FROM CodeFirstDatabase.Art AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Movies
        [Frost.Providers.Frost.DB.Movie](T1.Movie_Id, T1.Movie_Title, T1.Movie_OriginalTitle, T1.Movie_SortTitle, T1.Movie_Type, T1.Movie_Goofs, T1.Movie_Trivia, T1.Movie_ReleaseYear, T1.Movie_ReleaseDate, T1.Movie_Edithion, T1.Movie_DvdRegion, T1.Movie_LastPlayed, T1.Movie_Premiered, T1.Movie_Aired, T1.Movie_Trailer, T1.Movie_Top250, T1.Movie_Runtime, T1.Movie_Watched, T1.Movie_PlayCount, T1.Movie_RatingAverage, T1.Movie_ImdbID, T1.Movie_TmdbID, T1.Movie_ReleaseGroup, T1.Movie_IsMultipart, T1.Movie_PartTypes, T1.Movie_DirectoryPath, T1.Movie_NumberOfAudioChannels, T1.Movie_AudioCodec, T1.Movie_VideoResolution, T1.Movie_VideoCodec, T1.Movie_SetId)
    FROM (
        SELECT 
            T.Id AS Movie_Id, 
            T.Title AS Movie_Title, 
            T.OriginalTitle AS Movie_OriginalTitle, 
            T.SortTitle AS Movie_SortTitle, 
            CAST(T.Type AS [Frost.Providers.Frost.DB.MovieType]) AS Movie_Type, 
            T.Goofs AS Movie_Goofs, 
            T.Trivia AS Movie_Trivia, 
            T.ReleaseYear AS Movie_ReleaseYear, 
            T.ReleaseDate AS Movie_ReleaseDate, 
            T.Edithion AS Movie_Edithion, 
            CAST(T.DvdRegion AS [Frost.Providers.Frost.DB.DVDRegion]) AS Movie_DvdRegion, 
            T.LastPlayed AS Movie_LastPlayed, 
            T.Premiered AS Movie_Premiered, 
            T.Aired AS Movie_Aired, 
            T.Trailer AS Movie_Trailer, 
            T.Top250 AS Movie_Top250, 
            T.Runtime AS Movie_Runtime, 
            T.Watched AS Movie_Watched, 
            T.PlayCount AS Movie_PlayCount, 
            T.RatingAverage AS Movie_RatingAverage, 
            T.ImdbID AS Movie_ImdbID, 
            T.TmdbID AS Movie_TmdbID, 
            T.ReleaseGroup AS Movie_ReleaseGroup, 
            T.IsMultipart AS Movie_IsMultipart, 
            T.PartTypes AS Movie_PartTypes, 
            T.DirectoryPath AS Movie_DirectoryPath, 
            T.NumberOfAudioChannels AS Movie_NumberOfAudioChannels, 
            T.AudioCodec AS Movie_AudioCodec, 
            T.VideoResolution AS Movie_VideoResolution, 
            T.VideoCodec AS Movie_VideoCodec, 
            T.SetId AS Movie_SetId, 
            True AS _from0
        FROM CodeFirstDatabase.Movie AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Actors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Actors
        [Frost.Providers.Frost.DB.Actor](T1.Actor_Id, T1.Actor_Character, T1.Actor_MovieId, T1.Actor_PersonId)
    FROM (
        SELECT 
            T.Id AS Actor_Id, 
            T.Character AS Actor_Character, 
            T.MovieId AS Actor_MovieId, 
            T.PersonId AS Actor_PersonId, 
            True AS _from0
        FROM CodeFirstDatabase.Actor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.People.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing People
        [Frost.Providers.Frost.DB.Person](T1.Person_Id, T1.Person_Name, T1.Person_Thumb, T1.Person_ImdbID)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Name AS Person_Name, 
            T.Thumb AS Person_Thumb, 
            T.ImdbID AS Person_ImdbID, 
            True AS _from0
        FROM CodeFirstDatabase.Person AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.AudioDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AudioDetails
        [Frost.Providers.Frost.DB.Audio](T1.Audio_Id, T1.Audio_Source, T1.Audio_Type, T1.Audio_ChannelSetup, T1.Audio_NumberOfChannels, T1.Audio_ChannelPositions, T1.Audio_Codec, T1.Audio_CodecId, T1.Audio_BitRate, T1.Audio_BitRateMode, T1.Audio_SamplingRate, T1.Audio_BitDepth, T1.Audio_CompressionMode, T1.Audio_Duration, T1.Audio_LanguageId, T1.Audio_MovieId, T1.Audio_FileId)
    FROM (
        SELECT 
            T.Id AS Audio_Id, 
            T.Source AS Audio_Source, 
            T.Type AS Audio_Type, 
            T.ChannelSetup AS Audio_ChannelSetup, 
            T.NumberOfChannels AS Audio_NumberOfChannels, 
            T.ChannelPositions AS Audio_ChannelPositions, 
            T.Codec AS Audio_Codec, 
            T.CodecId AS Audio_CodecId, 
            CAST(T.BitRate AS [Edm.Single]) AS Audio_BitRate, 
            CAST(T.BitRateMode AS [Frost.Providers.Frost.DB.FrameOrBitRateMode]) AS Audio_BitRateMode, 
            T.SamplingRate AS Audio_SamplingRate, 
            T.BitDepth AS Audio_BitDepth, 
            CAST(T.CompressionMode AS [Frost.Providers.Frost.DB.CompressionMode]) AS Audio_CompressionMode, 
            T.Duration AS Audio_Duration, 
            T.LanguageId AS Audio_LanguageId, 
            T.MovieId AS Audio_MovieId, 
            T.FileId AS Audio_FileId, 
            True AS _from0
        FROM CodeFirstDatabase.Audio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Files.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Files
        [Frost.Providers.Frost.DB.File](T1.File_Id, T1.File_Extension, T1.File_Name, T1.File_FolderPath, T1.File_Size, T1.File_DateAdded)
    FROM (
        SELECT 
            T.Id AS File_Id, 
            T.Extension AS File_Extension, 
            T.Name AS File_Name, 
            T.FolderPath AS File_FolderPath, 
            T.Size AS File_Size, 
            T.DateAdded AS File_DateAdded, 
            True AS _from0
        FROM CodeFirstDatabase.File AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Subtitles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Subtitles
        [Frost.Providers.Frost.DB.Subtitle](T1.Subtitle_Id, T1.Subtitle_PodnapisiId, T1.Subtitle_OpenSubtitlesId, T1.Subtitle_MD5, T1.Subtitle_Format, T1.Subtitle_Encoding, T1.Subtitle_EmbededInVideo, T1.Subtitle_ForHearingImpaired, T1.Subtitle_LanguageId, T1.Subtitle_MovieId, T1.Subtitle_FileId)
    FROM (
        SELECT 
            T.Id AS Subtitle_Id, 
            T.PodnapisiId AS Subtitle_PodnapisiId, 
            T.OpenSubtitlesId AS Subtitle_OpenSubtitlesId, 
            T.MD5 AS Subtitle_MD5, 
            T.Format AS Subtitle_Format, 
            T.Encoding AS Subtitle_Encoding, 
            T.EmbededInVideo AS Subtitle_EmbededInVideo, 
            T.ForHearingImpaired AS Subtitle_ForHearingImpaired, 
            T.LanguageId AS Subtitle_LanguageId, 
            T.MovieId AS Subtitle_MovieId, 
            T.FileId AS Subtitle_FileId, 
            True AS _from0
        FROM CodeFirstDatabase.Subtitle AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Languages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Languages
        [Frost.Providers.Frost.DB.Language](T2.Language_Id, T2.Language_Name, T2.Language_ISO639)
    FROM (
        SELECT -- Constructing ISO639
            T1.Language_Id, 
            T1.Language_Name, 
            [Frost.Providers.Frost.DB.ISO639](T1.Language_ISO639_Alpha2, T1.Language_ISO639_Alpha3) AS Language_ISO639
        FROM (
            SELECT 
                T.Id AS Language_Id, 
                T.Name AS Language_Name, 
                T.ISO639_Alpha2 AS Language_ISO639_Alpha2, 
                T.ISO639_Alpha3 AS Language_ISO639_Alpha3, 
                True AS _from0
            FROM CodeFirstDatabase.Language AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.VideoDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing VideoDetails
        [Frost.Providers.Frost.DB.Video](T1.Video_Id, T1.Video_MovieHash, T1.Video_Source, T1.Video_Type, T1.Video_Resolution, T1.Video_ResolutionName, T1.Video_Standard, T1.Video_FPS, T1.Video_BitRate, T1.Video_BitRateMode, T1.Video_BitDepth, T1.Video_CompressionMode, T1.Video_Duration, T1.Video_ScanType, T1.Video_ColorSpace, T1.Video_ChromaSubsampling, T1.Video_Format, T1.Video_Codec, T1.Video_CodecId, T1.Video_Aspect, T1.Video_AspectCommercialName, T1.Video_Width, T1.Video_Height, T1.Video_LanguageId, T1.Video_MovieId, T1.Video_FileId)
    FROM (
        SELECT 
            T.Id AS Video_Id, 
            T.MovieHash AS Video_MovieHash, 
            T.Source AS Video_Source, 
            T.Type AS Video_Type, 
            T.Resolution AS Video_Resolution, 
            T.ResolutionName AS Video_ResolutionName, 
            T.Standard AS Video_Standard, 
            CAST(T.FPS AS [Edm.Single]) AS Video_FPS, 
            CAST(T.BitRate AS [Edm.Single]) AS Video_BitRate, 
            CAST(T.BitRateMode AS [Frost.Providers.Frost.DB.FrameOrBitRateMode]) AS Video_BitRateMode, 
            T.BitDepth AS Video_BitDepth, 
            CAST(T.CompressionMode AS [Frost.Providers.Frost.DB.CompressionMode]) AS Video_CompressionMode, 
            T.Duration AS Video_Duration, 
            CAST(T.ScanType AS [Frost.Providers.Frost.DB.ScanType]) AS Video_ScanType, 
            T.ColorSpace AS Video_ColorSpace, 
            T.ChromaSubsampling AS Video_ChromaSubsampling, 
            T.Format AS Video_Format, 
            T.Codec AS Video_Codec, 
            T.CodecId AS Video_CodecId, 
            T.Aspect AS Video_Aspect, 
            T.AspectCommercialName AS Video_AspectCommercialName, 
            T.Width AS Video_Width, 
            T.Height AS Video_Height, 
            T.LanguageId AS Video_LanguageId, 
            T.MovieId AS Video_MovieId, 
            T.FileId AS Video_FileId, 
            True AS _from0
        FROM CodeFirstDatabase.Video AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Awards.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Awards
        [Frost.Providers.Frost.DB.Award](T1.Award_Id, T1.Award_Organization, T1.Award_IsNomination, T1.Award_AwardType)
    FROM (
        SELECT 
            T.Id AS Award_Id, 
            T.Organization AS Award_Organization, 
            T.IsNomination AS Award_IsNomination, 
            T.AwardType AS Award_AwardType, 
            True AS _from0
        FROM CodeFirstDatabase.Award AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Certifications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Certifications
        [Frost.Providers.Frost.DB.Certification](T1.Certification_Id, T1.Certification_Rating, T1.Certification_MovieId, T1.Certification_CountryId)
    FROM (
        SELECT 
            T.Id AS Certification_Id, 
            T.Rating AS Certification_Rating, 
            T.MovieId AS Certification_MovieId, 
            T.CountryId AS Certification_CountryId, 
            True AS _from0
        FROM CodeFirstDatabase.Certification AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Countries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Countries
        [Frost.Providers.Frost.DB.Country](T2.Country_Id, T2.Country_Name, T2.Country_ISO3166)
    FROM (
        SELECT -- Constructing ISO3166
            T1.Country_Id, 
            T1.Country_Name, 
            [Frost.Providers.Frost.DB.ISO3166](T1.Country_ISO3166_Alpha2, T1.Country_ISO3166_Alpha3) AS Country_ISO3166
        FROM (
            SELECT 
                T.Id AS Country_Id, 
                T.Name AS Country_Name, 
                T.ISO3166_Alpha2 AS Country_ISO3166_Alpha2, 
                T.ISO3166_Alpha3 AS Country_ISO3166_Alpha3, 
                True AS _from0
            FROM CodeFirstDatabase.Country AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Genres.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Genres
        [Frost.Providers.Frost.DB.Genre](T1.Genre_Id, T1.Genre_Name)
    FROM (
        SELECT 
            T.Id AS Genre_Id, 
            T.Name AS Genre_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Genre AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Plots.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Plots
        [Frost.Providers.Frost.DB.Plot](T1.Plot_Id, T1.Plot_Tagline, T1.Plot_Summary, T1.Plot_Full, T1.Plot_Language, T1.Plot_MovieId)
    FROM (
        SELECT 
            T.Id AS Plot_Id, 
            T.Tagline AS Plot_Tagline, 
            T.Summary AS Plot_Summary, 
            T.[Full] AS Plot_Full, 
            T.Language AS Plot_Language, 
            T.MovieId AS Plot_MovieId, 
            True AS _from0
        FROM CodeFirstDatabase.Plot AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.PromotionalVideos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PromotionalVideos
        [Frost.Providers.Frost.DB.PromotionalVideo](T1.PromotionalVideo_Id, T1.PromotionalVideo_Type, T1.PromotionalVideo_Title, T1.PromotionalVideo_Url, T1.PromotionalVideo_Duration, T1.PromotionalVideo_Language, T1.PromotionalVideo_SubtitleLanguage, T1.PromotionalVideo_MovieId)
    FROM (
        SELECT 
            T.Id AS PromotionalVideo_Id, 
            CAST(T.Type AS [Frost.Providers.Frost.DB.PromotionalVideoType]) AS PromotionalVideo_Type, 
            T.Title AS PromotionalVideo_Title, 
            T.Url AS PromotionalVideo_Url, 
            T.Duration AS PromotionalVideo_Duration, 
            T.Language AS PromotionalVideo_Language, 
            T.SubtitleLanguage AS PromotionalVideo_SubtitleLanguage, 
            T.MovieId AS PromotionalVideo_MovieId, 
            True AS _from0
        FROM CodeFirstDatabase.PromotionalVideo AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Ratings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Ratings
        [Frost.Providers.Frost.DB.Rating](T1.Rating_Id, T1.Rating_Critic, T1.Rating_Value, T1.Rating_MovieId)
    FROM (
        SELECT 
            T.Id AS Rating_Id, 
            T.Critic AS Rating_Critic, 
            T.[Value] AS Rating_Value, 
            T.MovieId AS Rating_MovieId, 
            True AS _from0
        FROM CodeFirstDatabase.Rating AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Sets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Sets
        [Frost.Providers.Frost.DB.Set](T1.Set_Id, T1.Set_Name)
    FROM (
        SELECT 
            T.Id AS Set_Id, 
            T.Name AS Set_Name, 
            True AS _from0
        FROM CodeFirstDatabase.[Set] AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Specials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Specials
        [Frost.Providers.Frost.DB.Special](T1.Special_Id, T1.Special_Value)
    FROM (
        SELECT 
            T.Id AS Special_Id, 
            T.[Value] AS Special_Value, 
            True AS _from0
        FROM CodeFirstDatabase.Special AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Studios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Studios
        [Frost.Providers.Frost.DB.Studio](T1.Studio_Id, T1.Studio_Name)
    FROM (
        SELECT 
            T.Id AS Studio_Id, 
            T.Name AS Studio_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Studio AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Person_MoviesAsDirector.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person_MoviesAsDirector
        [Frost.Providers.Frost.DB.Person_MoviesAsDirector](T3.[Person_MoviesAsDirector.Person_MoviesAsDirector_Source], T3.[Person_MoviesAsDirector.Person_MoviesAsDirector_Target])
    FROM (
        SELECT -- Constructing Person_MoviesAsDirector_Source
            CreateRef(FrostDbContainer.People, row(T2.[Person_MoviesAsDirector.Person_MoviesAsDirector_Source.Id]), [Frost.Providers.Frost.DB.Person]) AS [Person_MoviesAsDirector.Person_MoviesAsDirector_Source], 
            T2.[Person_MoviesAsDirector.Person_MoviesAsDirector_Target]
        FROM (
            SELECT -- Constructing Person_MoviesAsDirector_Target
                T1.[Person_MoviesAsDirector.Person_MoviesAsDirector_Source.Id], 
                CreateRef(FrostDbContainer.Movies, row(T1.[Person_MoviesAsDirector.Person_MoviesAsDirector_Target.Id]), [Frost.Providers.Frost.DB.Movie]) AS [Person_MoviesAsDirector.Person_MoviesAsDirector_Target]
            FROM (
                SELECT 
                    T.DirectorId AS [Person_MoviesAsDirector.Person_MoviesAsDirector_Source.Id], 
                    T.MovieId AS [Person_MoviesAsDirector.Person_MoviesAsDirector_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.PersonMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Person_MoviesAsWriter.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person_MoviesAsWriter
        [Frost.Providers.Frost.DB.Person_MoviesAsWriter](T3.[Person_MoviesAsWriter.Person_MoviesAsWriter_Source], T3.[Person_MoviesAsWriter.Person_MoviesAsWriter_Target])
    FROM (
        SELECT -- Constructing Person_MoviesAsWriter_Source
            CreateRef(FrostDbContainer.People, row(T2.[Person_MoviesAsWriter.Person_MoviesAsWriter_Source.Id]), [Frost.Providers.Frost.DB.Person]) AS [Person_MoviesAsWriter.Person_MoviesAsWriter_Source], 
            T2.[Person_MoviesAsWriter.Person_MoviesAsWriter_Target]
        FROM (
            SELECT -- Constructing Person_MoviesAsWriter_Target
                T1.[Person_MoviesAsWriter.Person_MoviesAsWriter_Source.Id], 
                CreateRef(FrostDbContainer.Movies, row(T1.[Person_MoviesAsWriter.Person_MoviesAsWriter_Target.Id]), [Frost.Providers.Frost.DB.Movie]) AS [Person_MoviesAsWriter.Person_MoviesAsWriter_Target]
            FROM (
                SELECT 
                    T.WriterId AS [Person_MoviesAsWriter.Person_MoviesAsWriter_Source.Id], 
                    T.MovieId AS [Person_MoviesAsWriter.Person_MoviesAsWriter_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.PersonMovie1 AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Award_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Award_Movies
        [Frost.Providers.Frost.DB.Award_Movies](T3.[Award_Movies.Award_Movies_Source], T3.[Award_Movies.Award_Movies_Target])
    FROM (
        SELECT -- Constructing Award_Movies_Source
            CreateRef(FrostDbContainer.Awards, row(T2.[Award_Movies.Award_Movies_Source.Id]), [Frost.Providers.Frost.DB.Award]) AS [Award_Movies.Award_Movies_Source], 
            T2.[Award_Movies.Award_Movies_Target]
        FROM (
            SELECT -- Constructing Award_Movies_Target
                T1.[Award_Movies.Award_Movies_Source.Id], 
                CreateRef(FrostDbContainer.Movies, row(T1.[Award_Movies.Award_Movies_Target.Id]), [Frost.Providers.Frost.DB.Movie]) AS [Award_Movies.Award_Movies_Target]
            FROM (
                SELECT 
                    T.AwardId AS [Award_Movies.Award_Movies_Source.Id], 
                    T.MovieId AS [Award_Movies.Award_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.AwardMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Country_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Country_Movies
        [Frost.Providers.Frost.DB.Country_Movies](T3.[Country_Movies.Country_Movies_Source], T3.[Country_Movies.Country_Movies_Target])
    FROM (
        SELECT -- Constructing Country_Movies_Source
            CreateRef(FrostDbContainer.Countries, row(T2.[Country_Movies.Country_Movies_Source.Id]), [Frost.Providers.Frost.DB.Country]) AS [Country_Movies.Country_Movies_Source], 
            T2.[Country_Movies.Country_Movies_Target]
        FROM (
            SELECT -- Constructing Country_Movies_Target
                T1.[Country_Movies.Country_Movies_Source.Id], 
                CreateRef(FrostDbContainer.Movies, row(T1.[Country_Movies.Country_Movies_Target.Id]), [Frost.Providers.Frost.DB.Movie]) AS [Country_Movies.Country_Movies_Target]
            FROM (
                SELECT 
                    T.CountryId AS [Country_Movies.Country_Movies_Source.Id], 
                    T.MovieId AS [Country_Movies.Country_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.CountryMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Genre_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Genre_Movies
        [Frost.Providers.Frost.DB.Genre_Movies](T3.[Genre_Movies.Genre_Movies_Source], T3.[Genre_Movies.Genre_Movies_Target])
    FROM (
        SELECT -- Constructing Genre_Movies_Source
            CreateRef(FrostDbContainer.Genres, row(T2.[Genre_Movies.Genre_Movies_Source.Id]), [Frost.Providers.Frost.DB.Genre]) AS [Genre_Movies.Genre_Movies_Source], 
            T2.[Genre_Movies.Genre_Movies_Target]
        FROM (
            SELECT -- Constructing Genre_Movies_Target
                T1.[Genre_Movies.Genre_Movies_Source.Id], 
                CreateRef(FrostDbContainer.Movies, row(T1.[Genre_Movies.Genre_Movies_Target.Id]), [Frost.Providers.Frost.DB.Movie]) AS [Genre_Movies.Genre_Movies_Target]
            FROM (
                SELECT 
                    T.GenreId AS [Genre_Movies.Genre_Movies_Source.Id], 
                    T.MovieId AS [Genre_Movies.Genre_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.GenreMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Special_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Special_Movies
        [Frost.Providers.Frost.DB.Special_Movies](T3.[Special_Movies.Special_Movies_Source], T3.[Special_Movies.Special_Movies_Target])
    FROM (
        SELECT -- Constructing Special_Movies_Source
            CreateRef(FrostDbContainer.Specials, row(T2.[Special_Movies.Special_Movies_Source.Id]), [Frost.Providers.Frost.DB.Special]) AS [Special_Movies.Special_Movies_Source], 
            T2.[Special_Movies.Special_Movies_Target]
        FROM (
            SELECT -- Constructing Special_Movies_Target
                T1.[Special_Movies.Special_Movies_Source.Id], 
                CreateRef(FrostDbContainer.Movies, row(T1.[Special_Movies.Special_Movies_Target.Id]), [Frost.Providers.Frost.DB.Movie]) AS [Special_Movies.Special_Movies_Target]
            FROM (
                SELECT 
                    T.SpecialId AS [Special_Movies.Special_Movies_Source.Id], 
                    T.MovieId AS [Special_Movies.Special_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.SpecialMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for FrostDbContainer.Studio_Movies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Studio_Movies
        [Frost.Providers.Frost.DB.Studio_Movies](T3.[Studio_Movies.Studio_Movies_Source], T3.[Studio_Movies.Studio_Movies_Target])
    FROM (
        SELECT -- Constructing Studio_Movies_Source
            CreateRef(FrostDbContainer.Studios, row(T2.[Studio_Movies.Studio_Movies_Source.Id]), [Frost.Providers.Frost.DB.Studio]) AS [Studio_Movies.Studio_Movies_Source], 
            T2.[Studio_Movies.Studio_Movies_Target]
        FROM (
            SELECT -- Constructing Studio_Movies_Target
                T1.[Studio_Movies.Studio_Movies_Source.Id], 
                CreateRef(FrostDbContainer.Movies, row(T1.[Studio_Movies.Studio_Movies_Target.Id]), [Frost.Providers.Frost.DB.Movie]) AS [Studio_Movies.Studio_Movies_Target]
            FROM (
                SELECT 
                    T.StudioId AS [Studio_Movies.Studio_Movies_Source.Id], 
                    T.MovieId AS [Studio_Movies.Studio_Movies_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.StudioMovie AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
