<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>Frost.PHPtoNET</name>
  </assembly>
  <members>
    <member name="N:PHPSerialize">
    </member>
    <member name="T:PHPSerialize.PHPArrayDeserializer">
    </member>
    <member name="M:PHPSerialize.PHPArrayDeserializer.ParseSingleTypeArrayByType(PHPSerialize.IScanner,System.Type)">
      <summary>
Parses the single type unsigned integer keyed array.</summary>
      <returns>
Array of the specified type</returns>
      <param name="scanner">
The scanner.</param>
      <param name="arrayType">
Type of array to parse</param>
      <exception cref="ParsingException">
Throws if the source is not a serialized single type integer keyed array or is corrupted.</exception>
    </member>
    <member name="M:PHPSerialize.PHPArrayDeserializer.ParseSingleTypeArray``1(PHPSerialize.IScanner)">
      <summary>
Parses the single type unsigned integer keyed array.</summary>
      <returns>
The array containing the parsed values of type <typeparamref name="T" /></returns>
      <param name="scanner">
The scanner to use when parsing.</param>
      <exception cref="ParsingException">
Throws if the source is not a serialized single type integer keyed array or is corrupted.</exception>
    </member>
    <member name="M:PHPSerialize.PHPArrayDeserializer.ParseMixedKeyArray(PHPSerialize.IScanner)">
      <summary>
Parses integer or string keyed array. Order is not preserved</summary>
      <returns>
The array containing the parsed values</returns>
      <param name="scanner">
The scanner.</param>
      <exception cref="ParsingException">
Throws if the source is not a serialized integer or string keyed array or is corrupted.</exception>
    </member>
    <member name="T:PHPSerialize.PHPObjectParser">
    </member>
    <member name="M:PHPSerialize.PHPObjectParser.#ctor(PHPSerialize.IScanner)">
      <param name="scanner">
</param>
    </member>
    <member name="M:PHPSerialize.PHPObjectParser.#ctor(System.String,System.Text.Encoding)">
      <param name="serializedObj">
String to be parsed</param>
      <param name="encoding">
Encoding in which the source string is saved, if <b>null</b> or omitted defaults to <see cref="Encoding.UTF8" /></param>
    </member>
    <member name="M:PHPSerialize.PHPObjectParser.Obj``1(``0@)">
      <param name="obj">
</param>
    </member>
    <member name="M:PHPSerialize.IScanner.CurrToken">
    </member>
    <member name="M:PHPSerialize.IScanner.NextToken">
    </member>
    <member name="M:PHPSerialize.IScanner.Peek">
    </member>
    <member name="M:PHPSerialize.IResetableScanner.Reset">
    </member>
    <member name="T:PHPSerialize.Scanner">
    </member>
    <member name="M:PHPSerialize.Scanner.#ctor(System.IO.StreamReader,System.Boolean)">
      <summary>
Scanner constructor, requires string source as a stream</summary>
      <param name="source">
String source stream</param>
      <param name="rewind">
Rewind the source stream to the beginning if it supports seeking</param>
    </member>
    <member name="M:PHPSerialize.Scanner.#ctor(System.String,System.Text.Encoding)">
      <summary>
Scanner constructor</summary>
      <param name="source">
String to be parsed</param>
      <param name="enc">
Encoding in which the source string is saved, if <b>null</b> defaults to <see cref="Encoding.UTF8" /></param>
    </member>
    <member name="M:PHPSerialize.Scanner.NextToken">
    </member>
    <member name="M:PHPSerialize.Scanner.CurrToken">
      <summary>
Return the current Token</summary>
      <returns>
Current token</returns>
    </member>
    <member name="M:PHPSerialize.Scanner.Peek">
    </member>
    <member name="M:PHPSerialize.Scanner.Reset">
    </member>
    <member name="M:PHPSerialize.Scanner.Dispose">
      <summary>
Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:PHPSerialize.Token">
    </member>
    <member name="M:PHPSerialize.Token.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <param name="lexem">
</param>
      <param name="column">
</param>
      <param name="row">
</param>
      <param name="token">
</param>
      <param name="eof">
</param>
    </member>
    <member name="M:PHPSerialize.Token.#ctor(System.String,System.Int32,System.Int32,PHPSerialize.Tokens,System.Boolean)">
      <param name="lexem">
</param>
      <param name="column">
</param>
      <param name="row">
</param>
      <param name="token">
</param>
      <param name="eof">
</param>
    </member>
    <member name="P:PHPSerialize.Token.Lexem">
      <summary>
Vrne ali nastavi Leksem</summary>
    </member>
    <member name="P:PHPSerialize.Token.Column">
      <summary>
Vrne ali nastavi stolpec, kjer se token pojavi</summary>
    </member>
    <member name="P:PHPSerialize.Token.Line">
      <summary>
Gets or sets the row.</summary>
    </member>
    <member name="P:PHPSerialize.Token.TokenType">
      <summary>
Vrednost, ki jo token predstavlja</summary>
    </member>
    <member name="P:PHPSerialize.Token.EOF">
      <summary>
Vrne ali nastavi ali trenutni token predstavlja konec datoteke.</summary>
    </member>
    <member name="M:PHPSerialize.Token.ToString">
    </member>
  </members>
</doc>
